{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paper-trade-tsx/src/PaperTrade.tsx\";\nimport React from 'react';\nimport SearchForm from './forms/SearchForm';\nimport StockResultDisplay from './forms/StockResultDisplay';\nimport { getStockIndex } from './helpers';\nimport \"./PaperTrade.css\";\nimport PortfolioDetails from './PortfolioDetails';\nimport PortfolioTable from './PortfolioTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultPortfolio = {\n  name: \"Tech Stocks\",\n  cash: 1000000,\n  stocks: [{\n    symbol: \"AAPL\",\n    latestPrice: 132.32,\n    quantity: 200,\n    pricePurchased: 110.23\n  }, {\n    symbol: \"AMZN\",\n    latestPrice: 3456.32,\n    quantity: 100,\n    pricePurchased: 2342.32\n  }]\n};\n\nclass PaperTrade extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      portfolio: defaultPortfolio,\n      JSONOrString: \"\",\n      stockInPortfolio: false\n    };\n  }\n\n  handleSearch(JSONOrString) {\n    if (typeof JSONOrString === 'string') {\n      console.log(`it is a string with ${JSONOrString}`);\n      console.log(JSONOrString);\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString,\n        stockJSON: JSONOrString\n      });\n    }\n  }\n\n  handleBuy(cost, quantity, stockJSON) {\n    const portfolio = this.state.portfolio;\n    const newStock = {\n      symbol: stockJSON.symbol,\n      latestPrice: stockJSON.latestPrice,\n      quantity: quantity,\n      pricePurchased: stockJSON.latestPrice\n    };\n\n    const combineTwoStocks = (newStock, oldStock) => {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    }; // check sufficient cash\n\n\n    if (portfolio.cash > cost) {\n      portfolio.cash = portfolio.cash - cost; // checks if stock exists and merges them if they are\n\n      const index = getStockIndex(portfolio, newStock);\n\n      if (index !== -1) {\n        console.log(\"stock exists in portfolio already\");\n        portfolio.stocks[index] = combineTwoStocks(newStock, portfolio.stocks[index]);\n      } else {\n        console.log(\"stock not found, pushing new stock\");\n        portfolio.stocks.push(newStock);\n      }\n\n      this.setState({\n        portfolio: portfolio\n      });\n    }\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"http://localhost:3000/\",\n          children: \"Paper Trade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n        portfolio: this.state.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"forms\",\n        children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n          JSONOrString: this.state.JSONOrString,\n          handleSearch: this.handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(StockResultDisplay, {\n          JSONOrString: this.state.JSONOrString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), this.state.portfolio && /*#__PURE__*/_jsxDEV(PortfolioTable, {\n        portfolio: this.state.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default PaperTrade;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paper-trade-tsx/src/PaperTrade.tsx"],"names":["React","SearchForm","StockResultDisplay","getStockIndex","PortfolioDetails","PortfolioTable","defaultPortfolio","name","cash","stocks","symbol","latestPrice","quantity","pricePurchased","PaperTrade","Component","state","portfolio","JSONOrString","stockInPortfolio","handleSearch","console","log","setState","stockJSON","handleBuy","cost","newStock","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","index","push","render","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BuyAndSellForm from './forms/BuyAndSellForm';\nimport SearchForm from './forms/SearchForm';\nimport StockResultDisplay from './forms/StockResultDisplay';\nimport { getStockIndex } from './helpers';\nimport { IRootObject, Portfolio, Stock } from './interfaces';\nimport \"./PaperTrade.css\"\nimport PortfolioDetails from './PortfolioDetails';\nimport PortfolioTable from './PortfolioTable';\n\n\nconst defaultPortfolio =  {\n    name: \"Tech Stocks\",\n    cash: 1000000,\n    stocks: [{\n        symbol: \"AAPL\",\n        latestPrice: 132.32,\n        quantity: 200,\n        pricePurchased: 110.23,\n    },\n    {\n        symbol: \"AMZN\",\n        latestPrice: 3456.32,\n        quantity: 100,\n        pricePurchased: 2342.32,\n    }]\n}\n\ntype PaperTradeState = {\n    portfolio: Portfolio\n    JSONOrString: IRootObject | string\n    stockJSON?: IRootObject\n    stockInPortfolio: boolean\n}\n\nclass PaperTrade extends React.Component<{}, PaperTradeState> {\n    state={\n        portfolio: defaultPortfolio,\n        JSONOrString: \"\",\n        stockInPortfolio: false\n    }\n\n    handleSearch(JSONOrString: IRootObject | string) {\n        if (typeof JSONOrString === 'string') {\n            console.log(`it is a string with ${JSONOrString}`)\n            console.log(JSONOrString)\n            this.setState({\n                JSONOrString: JSONOrString,\n            })\n        } else {\n            this.setState({\n                JSONOrString: JSONOrString,\n                stockJSON: JSONOrString\n            });\n        }\n    }\n\n    handleBuy(cost: number, quantity: number, stockJSON: IRootObject) {\n        const portfolio = this.state.portfolio\n\n        const newStock = {\n            symbol: stockJSON.symbol,\n            latestPrice: stockJSON.latestPrice,\n            quantity: quantity,\n            pricePurchased: stockJSON.latestPrice,\n        }\n\n        const combineTwoStocks = (newStock: Stock, oldStock: Stock) => {\n            // quantity will be the sum of both,\n            // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n            // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n            // 1*10 = 10, 2*20 = 40, 50/3\n            const newTotalQuantity = newStock.quantity + oldStock.quantity;\n            const newAveragePricePurchased = \n                (newStock.quantity * newStock.pricePurchased\n                + oldStock.quantity * oldStock.pricePurchased)\n                / (newTotalQuantity);\n            newStock.quantity = newTotalQuantity;\n            newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n            return newStock\n        }\n\n        // check sufficient cash\n        if (portfolio.cash > cost) {\n            portfolio.cash = portfolio.cash - cost;\n            // checks if stock exists and merges them if they are\n            const index = getStockIndex(portfolio, newStock)\n            if (index !== -1) {\n                console.log(\"stock exists in portfolio already\")\n                portfolio.stocks[index] = combineTwoStocks(newStock, portfolio.stocks[index])\n            } else {\n                console.log(\"stock not found, pushing new stock\")\n                portfolio.stocks.push(newStock);\n            }\n            this.setState({\n                portfolio: portfolio\n            });\n        }\n    }\n\n    render() {\n        this.handleSearch = this.handleSearch.bind(this)\n        this.handleBuy = this.handleBuy.bind(this)\n\n\n        return(\n        <div className=\"container\">\n            <div id=\"logo\">\n                <a href=\"http://localhost:3000/\">\n                    Paper Trade\n                </a>\n            </div>\n            <PortfolioDetails portfolio={this.state.portfolio}/>\n            <div id=\"forms\">\n                <SearchForm JSONOrString={this.state.JSONOrString} handleSearch={this.handleSearch}/>\n                <StockResultDisplay JSONOrString={this.state.JSONOrString}/>\n                {/* {this.state.stockInPortfolio && <BuyAndSellForm \n                portfolio={this.state.portfolio} \n                stockJSON={this.state.stockJSON!} \n                handleBuy={this.handleBuy}\n                stockInPortfolio={this.state.stockInPortfolio}/>} */}\n\n            </div>\n            \n            {this.state.portfolio && <PortfolioTable portfolio={this.state.portfolio}/>}\n        </div>\n        )\n    }\n}\n\nexport default PaperTrade;\n"]},"metadata":{},"sourceType":"module"}