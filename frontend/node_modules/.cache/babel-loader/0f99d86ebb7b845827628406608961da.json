{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockRow(props) {\n  _s();\n\n  const [latestPrice, setLatestPrice] = useState([0, 0, 0]);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\");\n\n  const fetchPrice = async () => {\n    const newLatestPrice = latestPrice.slice(1, 3);\n    console.log(`inital is ${newLatestPrice}`);\n    const price = await getStockLatestPrice(props.stock.symbol);\n    newLatestPrice.push(price);\n    console.log(`setting latest price to ${newLatestPrice}`);\n    setLatestPrice(newLatestPrice);\n  }; // //initial price, runs once\n\n\n  useLayoutEffect(() => {\n    fetchPrice();\n  }, []); // sets latest price every 5 seconds\n\n  useEffect(() => {\n    // console.log(`${latestPrice}`)\n    if (latestPrice[1] > latestPrice[0]) {\n      setLatestPriceFontColor(\"green\"); // setLatestPrice(newPrice)\n    } else {\n      setLatestPriceFontColor(\"red\"); // setLatestPrice(newPrice)\n    }\n\n    fetchPrice();\n    const interval = setInterval(() => {\n      fetchPrice();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        color: latestPriceFontColor\n      },\n      children: latestPrice[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.pricePurchased\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice[1] * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice[1] * props.stock.quantity - props.stock.pricePurchased * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StockRow, \"sOqeF5mvzd1NqGrska9rYIo87yw=\");\n\n_c = StockRow;\nexport default function StockList(props) {\n  // console.log(\"stocklist refreshing but why\")\n  // This method will map out the records on the table\n  const StocksToTable = stockList => {\n    return stockList.map(stock => /*#__PURE__*/_jsxDEV(StockRow, {\n      stock: stock //deleteStock={() => deleteStock(stock._id)}\n\n    }, stock.symbol, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this));\n  }; // This following section will display the table with the records of individuals.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Stock List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latest Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price Purchased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: StocksToTable(props.stocks)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 4\n  }, this);\n}\n_c2 = StockList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockRow\");\n$RefreshReg$(_c2, \"StockList\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx"],"names":["React","useEffect","useLayoutEffect","useState","getStockLatestPrice","StockRow","props","latestPrice","setLatestPrice","latestPriceFontColor","setLatestPriceFontColor","fetchPrice","newLatestPrice","slice","console","log","price","stock","symbol","push","interval","setInterval","clearInterval","color","quantity","pricePurchased","toFixed","StockList","StocksToTable","stockList","map","stocks"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { Stock } from \"../interfaces\";\n\ninterface stockRowProps {\n  stock: Stock\n  //deleteStock: any\n  key: string\n}\n\n\nfunction StockRow(props: stockRowProps) {\n  const[latestPrice, setLatestPrice] = useState([0,0,0]);\n  const[latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\")\n\n  const fetchPrice = async () => {\n    const newLatestPrice = latestPrice.slice(1,3)\n    console.log(`inital is ${newLatestPrice}`)\n\n    const price = await getStockLatestPrice(props.stock.symbol)\n    \n\n    newLatestPrice.push(price)\n    console.log(`setting latest price to ${newLatestPrice}`)\n\n\n    setLatestPrice(newLatestPrice)\n  }\n  // //initial price, runs once\n  useLayoutEffect (() => {\n    fetchPrice() \n  }, []); \n\n  // sets latest price every 5 seconds\n  useEffect (() => {\n    // console.log(`${latestPrice}`)\n    if (latestPrice[1] > latestPrice[0]) {\n      setLatestPriceFontColor(\"green\")\n      // setLatestPrice(newPrice)\n    } else {\n      setLatestPriceFontColor(\"red\")\n      // setLatestPrice(newPrice)\n    }\n\n    fetchPrice()\n\n    const interval = setInterval(() => {\n      fetchPrice()\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return(\n    <tr>\n      <td>{props.stock.symbol}</td>\n      <td style={{color: latestPriceFontColor}}>{latestPrice[1]}</td>\n      <td>{props.stock.quantity}</td>\n      <td>{props.stock.pricePurchased}</td>\n      <td>{+(latestPrice[1]*props.stock.quantity).toFixed(2)}</td>\n      <td>{+(latestPrice[1]*props.stock.quantity-props.stock.pricePurchased*props.stock.quantity).toFixed(2)}</td>\n    </tr>\n  )\n}\n \n\ninterface stockListProps {\n  stocks: Stock[]\n}\nexport default function StockList(props: stockListProps) {\n  // console.log(\"stocklist refreshing but why\")\n \n // This method will map out the records on the table\n const StocksToTable = (stockList: Stock[]) => {\n  return (\n    stockList.map((stock =>\n      <StockRow\n           stock={stock}\n           //deleteStock={() => deleteStock(stock._id)}\n           key={stock.symbol}\n         />\n    )))\n }\n \n // This following section will display the table with the records of individuals.\n return (\n   <div>\n     <h3>Stock List</h3>\n     <table>\n       <thead>\n         <tr>\n           <th>Symbol</th>\n           <th>Latest Price</th>\n           <th>Quantity</th>\n           <th>Price Purchased</th>\n           <th>Value</th>\n           <th>Net Value</th>\n         </tr>\n       </thead>\n       <tbody>{StocksToTable(props.stocks)}</tbody>\n     </table>\n   </div>\n );\n}"]},"metadata":{},"sourceType":"module"}