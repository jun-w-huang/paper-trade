{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BuyAndSellForm(props) {\n  _s();\n\n  const [formData, setFormData] = useState({\n    symbol: props.stockJSON.symbol,\n    quantity: \"100\",\n    pricePurchased: props.stockJSON.latestPrice\n  });\n  const [quantity, setQuantity] = useState(100);\n  const [cost, setCost] = useState(0); // const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n  const params = useParams();\n  const navigate = useNavigate();\n  console.log(params.id);\n  useEffect(() => {\n    async function fetchData() {\n      var _params$id;\n\n      const id = params === null || params === void 0 ? void 0 : (_params$id = params.id) === null || _params$id === void 0 ? void 0 : _params$id.toString();\n      const response = await fetch(`http://localhost:5000/users/${params.id}`);\n      console.log(`http://localhost:5000/users/${params.id}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const user = await response.json();\n\n      if (!user) {\n        window.alert(`user with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      console.log(user);\n      setFormData(user);\n    }\n\n    fetchData();\n    return;\n  }, [params.id, navigate]); // function updateFormData(value: any) {\n  //     return setFormData((prev: any) => {\n  //       return { ...prev, ...value };\n  //     });\n  //   }\n\n  useEffect(() => {\n    console.log(\"use effect triggered\");\n    console.log(formData);\n    setCost(quantity * props.stockJSON.latestPrice);\n  });\n\n  const onChange = e => {\n    setQuantity(parseInt(e.target.value));\n    setCost(parseInt(e.target.value) * props.stockJSON.latestPrice);\n  };\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (cost > props.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    const stocks = props.userJSON.stocks.slice();\n    const newStock = {\n      symbol: formData.symbol,\n      quantity: parseInt(formData.quantity),\n      pricePurchased: formData.pricePurchased\n    };\n    stocks.push(newStock);\n    const editedUser = {\n      \"_id\": props.userJSON._id,\n      \"username\": props.userJSON.username,\n      \"password\": props.userJSON.password,\n      \"portfolio\": props.userJSON.portfolio,\n      \"stocks\": stocks\n    };\n    await fetch(`http://localhost:5000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(\"submitting buy form\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BuyForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"quantity\",\n        defaultValue: \"100\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        name: \"buyButton\",\n        value: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cost / Revenue: \", cost.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BuyAndSellForm, \"cZRPHomJK47jEG1H4kTet3QgaMM=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = BuyAndSellForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyAndSellForm\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx"],"names":["React","useEffect","useState","useParams","useNavigate","BuyAndSellForm","props","formData","setFormData","symbol","stockJSON","quantity","pricePurchased","latestPrice","setQuantity","cost","setCost","params","navigate","console","log","id","fetchData","toString","response","fetch","ok","message","statusText","window","alert","user","json","onChange","e","parseInt","target","value","onSubmit","preventDefault","userJSON","portfolio","cash","stocks","slice","newStock","push","editedUser","_id","username","password","method","body","JSON","stringify","headers","toFixed"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { IRootObject, Portfolio, userJSON } from \"../../interfaces\";\n\ninterface BuyAndSellFormProps {\n    userJSON: userJSON\n    stockJSON : IRootObject\n    portfolio: Portfolio\n    // handleBuy: (cost: number, quantity: number, stockJSON: IRootObject) => void\n}\n\n\nexport default function BuyAndSellForm(props: BuyAndSellFormProps){\n\n    const [formData, setFormData] = useState({\n        symbol: props.stockJSON.symbol,\n        quantity: \"100\",\n        pricePurchased: props.stockJSON.latestPrice,\n    })\n\n    const [quantity, setQuantity] = useState(100)\n\n    const [cost, setCost] = useState(0);\n    // const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n    const params = useParams();\n    const navigate = useNavigate();\n    console.log(params.id)\n\n    useEffect(() => {\n        async function fetchData() {\n            const id = params?.id?.toString();\n            const response = await fetch(`http://localhost:5000/users/${params.id}`);\n            console.log(`http://localhost:5000/users/${params.id}`)\n            if (!response.ok) {\n                const message = `An error has occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n      \n            const user = await response.json();\n            if (!user) {\n                window.alert(`user with id ${id} not found`);\n                navigate(\"/\");\n                return;\n            }\n            console.log(user)\n        \n            setFormData(user);\n        }\n      \n        fetchData();\n      \n        return;\n    }, [params.id, navigate]);\n\n    // function updateFormData(value: any) {\n    //     return setFormData((prev: any) => {\n    //       return { ...prev, ...value };\n    //     });\n    //   }\n\n    useEffect(() => {\n        console.log(\"use effect triggered\")\n        console.log(formData)\n        setCost(quantity*props.stockJSON.latestPrice)\n    });\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setQuantity(parseInt(e.target.value))\n\n        setCost(parseInt(e.target.value)*props.stockJSON.latestPrice)\n    };\n\n    async function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n\n        if (cost > props.userJSON.portfolio.cash) {\n            window.alert(\"You don't have enough cash to buy this stock!\")\n            return;\n        }\n\n        const stocks = props.userJSON.stocks.slice()\n\n        const newStock = {\n            symbol: formData.symbol,\n            quantity: parseInt(formData.quantity),\n            pricePurchased: formData.pricePurchased,\n        }\n\n        stocks.push(newStock)\n\n        const editedUser = {\n            \"_id\": props.userJSON._id,\n            \"username\": props.userJSON.username,\n            \"password\": props.userJSON.password,\n            \"portfolio\": props.userJSON.portfolio,\n            \"stocks\": stocks\n          };\n\n        await fetch(`http://localhost:5000/update/${params.id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n            'Content-Type': 'application/json'\n            },\n        });\n        console.log(\"submitting buy form\")\n    }\n\n    return(\n        <div id=\"BuyForm\">\n            <form onSubmit={onSubmit}>\n                <label htmlFor=\"quantity\">Quantity: </label>\n                <input type=\"text\" id=\"quantity\" defaultValue=\"100\" onChange={onChange}/>\n                <input type=\"submit\" name=\"buyButton\" value=\"Buy\"/>\n                {/* <input type=\"button\" hidden={sellButtonVisibility} value=\"Sell\" onClick={() => onSell()}/> */}\n                {/* <Link className=\"btn btn-link\" to={`/edit/${props.userJSON._id}`}>Edit</Link> */}\n            </form>\n            <p>Cost / Revenue: {cost.toFixed(2)}</p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}