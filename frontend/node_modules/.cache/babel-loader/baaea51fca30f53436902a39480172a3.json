{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/TopTenStocksList.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useLayoutEffect, useState } from \"react\";\nimport { getStockLatestPrice, useInterval } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockRow(props) {\n  _s();\n\n  const [latestPrice, setLatestPrice] = useState(0);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\");\n  useInterval(() => {\n    getStockLatestPrice(props.stockJSON.symbol).then(newLatestPrice => {\n      setLatestPrice(newLatestPrice); // must use new price as setState hook is async\n\n      if (newLatestPrice > latestPrice) {\n        setLatestPriceFontColor(\"green\");\n      } else {\n        setLatestPriceFontColor(\"red\");\n      }\n    });\n  }, 5000); //initial price, runs once\n\n  useLayoutEffect(() => {\n    console.log(\"layout\");\n    getStockLatestPrice(props.stockJSON.symbol).then(newLatestPrice => {\n      setLatestPrice(newLatestPrice);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stockJSON.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stockJSON.companyName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stockJSON.latestPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.usePercentChange ? `${props.stockJSON.changePercent.toFixed(2)}%` : props.stockJSON.change.toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StockRow, \"iHw07RPI2J/p2EKiI5pdOmstIMg=\", false, function () {\n  return [useInterval];\n});\n\n_c = StockRow;\nexport default function TopTenStocksList() {\n  _s2();\n\n  const [topTen, setTopTen] = useState([]);\n  const [usePercentChange, setUsePercentChange] = useState(true);\n\n  const fetchData = async () => {\n    const request = await fetch(`https://sandbox.iexapis.com/stable/stock/market/list/mostactive/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const data = await request.json();\n    setTopTen(data);\n  };\n\n  const TogglePercent = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        setUsePercentChange(prev => !prev);\n      },\n      children: \"Toggle %\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n\n  useLayoutEffect(() => {\n    fetchData();\n  }, []);\n\n  const StockListToTableBody = stockList => {\n    return stockList.map(stock => /*#__PURE__*/_jsxDEV(StockRow, {\n      usePercentChange: usePercentChange,\n      stockJSON: stock\n    }, stock.symbol, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Trending Stocks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TogglePercent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Company Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latest Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Change\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: StockListToTableBody(topTen)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TopTenStocksList, \"BxvTiRMiT0DolHLYSqYzpWF9tuc=\");\n\n_c2 = TopTenStocksList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockRow\");\n$RefreshReg$(_c2, \"TopTenStocksList\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/TopTenStocksList.tsx"],"names":["useLayoutEffect","useState","getStockLatestPrice","useInterval","StockRow","props","latestPrice","setLatestPrice","latestPriceFontColor","setLatestPriceFontColor","stockJSON","symbol","then","newLatestPrice","console","log","companyName","usePercentChange","changePercent","toFixed","change","TopTenStocksList","topTen","setTopTen","setUsePercentChange","fetchData","request","fetch","data","json","TogglePercent","prev","StockListToTableBody","stockList","map","stock"],"mappings":"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","sourcesContent":["import { useLayoutEffect, useState } from \"react\";\nimport { getStockLatestPrice, useInterval } from \"../helpers\";\nimport { IRootObject } from \"../interfaces\";\n\ninterface stockRowProps {\n  stockJSON: IRootObject;\n  usePercentChange: Boolean;\n}\nfunction StockRow(props: stockRowProps) {\n  const [latestPrice, setLatestPrice] = useState(0);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\");\n\n  useInterval(() => {\n    getStockLatestPrice(props.stockJSON.symbol).then((newLatestPrice) => {\n      setLatestPrice(newLatestPrice);\n      // must use new price as setState hook is async\n      if (newLatestPrice > latestPrice) {\n        setLatestPriceFontColor(\"green\");\n      } else {\n        setLatestPriceFontColor(\"red\");\n      }\n    });\n  }, 5000);\n\n  //initial price, runs once\n  useLayoutEffect(() => {\n    console.log(\"layout\");\n    getStockLatestPrice(props.stockJSON.symbol).then((newLatestPrice) => {\n      setLatestPrice(newLatestPrice);\n    });\n  }, []);\n\n  return (\n    <tr>\n      <td>{props.stockJSON.symbol}</td>\n      <td>{props.stockJSON.companyName}</td>\n      <td>{props.stockJSON.latestPrice}</td>\n      <td>\n        {props.usePercentChange\n          ? `${props.stockJSON.changePercent.toFixed(2)}%`\n          : props.stockJSON.change.toFixed(2)}\n      </td>\n    </tr>\n  );\n}\n\nexport default function TopTenStocksList() {\n  const [topTen, setTopTen] = useState([]);\n  const [usePercentChange, setUsePercentChange] = useState(true);\n\n  const fetchData = async () => {\n    const request =\n      await fetch(`https://sandbox.iexapis.com/stable/stock/market/list/mostactive/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const data = await request.json();\n    setTopTen(data);\n  };\n\n  const TogglePercent = () => {\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          setUsePercentChange((prev) => !prev);\n        }}\n      >\n        Toggle %\n      </button>\n    );\n  };\n\n  useLayoutEffect(() => {\n    fetchData();\n  }, []);\n\n  const StockListToTableBody = (stockList: IRootObject[]) => {\n    return stockList.map((stock) => (\n      <StockRow\n        usePercentChange={usePercentChange}\n        stockJSON={stock}\n        key={stock.symbol}\n      />\n    ));\n  };\n\n  return (\n    <div>\n      <div>\n        <h3>Trending Stocks</h3>\n        <TogglePercent />\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Company Name</th>\n            <th>Latest Price</th>\n            <th>Change</th>\n          </tr>\n        </thead>\n        <tbody>{StockListToTableBody(topTen)}</tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}