{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx\";\nimport React from \"react\";\nimport \"./styles/PaperTrade.css\";\nimport PortfolioDetails from \"./components/PortfolioDetails\";\nimport SearchForm from \"./components/forms/SearchForm\";\nimport OwnedStockList from \"./components/OwnedStocksList\";\nimport Header from \"./components/header\";\nimport { getThisUserJSON } from \"./helpers\";\nimport TopTenStocksList from \"./components/TopTenStocksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PaperTrade extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.initialState = {\n      token: this.props.token,\n      userJSON: {\n        _id: {\n          $oid: \"\"\n        },\n        username: \"\",\n        password: \"\",\n        portfolio: {\n          name: \"\",\n          cash: 0\n        },\n        stocks: []\n      },\n      JSONOrString: \"\"\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"helloo component is updating!\");\n    getThisUserJSON(this.props.token).then(userJSON => {\n      this.setState({\n        userJSON: userJSON\n      });\n    });\n  }\n\n  handleSearch(JSONOrString) {\n    if (typeof JSONOrString === \"string\") {\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    }\n  }\n\n  async handleBuy(props) {\n    console.log(\"handlebuy running\");\n    console.log(\"buy button pressed\");\n\n    if (props.cost > this.state.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    console.log(\"user json is :\");\n    console.log(this.state.userJSON);\n    const newStocks = this.state.userJSON.stocks.slice();\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: props.quantity,\n      pricePurchased: props.stockJSON.latestPrice\n    };\n\n    function combineTwoStocks(newStock, oldStock) {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    }\n\n    if (props.stockIsOwned) {\n      console.log(\"hello\");\n      const newCombinedStock = combineTwoStocks(newStock, this.state.userJSON.stocks[props.index]);\n      newStocks[props.index] = newCombinedStock;\n    } else {\n      newStocks.push(newStock);\n    }\n\n    const newCash = this.state.userJSON.portfolio.cash - props.cost;\n    const newPortfolio = {\n      name: this.state.userJSON.portfolio.name,\n      cash: newCash\n    };\n    const editedUser = {\n      portfolio: newPortfolio,\n      stocks: newStocks\n    };\n    await fetch(`http://localhost:5000/update/${this.state.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    this.fetchUser();\n  }\n\n  fetchUser() {\n    getThisUserJSON(this.props.token).then(userJSON => {\n      console.log(userJSON);\n\n      if (userJSON) {\n        this.setState({\n          userJSON: userJSON\n        });\n      }\n    });\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        username: this.state.userJSON.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n        portfolio: this.state.userJSON.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        userJSON: this.state.userJSON,\n        JSONOrString: this.state.JSONOrString,\n        handleSearch: this.handleSearch,\n        handleBuy: this.handleBuy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OwnedStockList, {\n        stocks: this.state.userJSON.stocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopTenStocksList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PaperTrade;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx"],"names":["React","PortfolioDetails","SearchForm","OwnedStockList","Header","getThisUserJSON","TopTenStocksList","PaperTrade","Component","initialState","token","props","userJSON","_id","$oid","username","password","portfolio","name","cash","stocks","JSONOrString","state","componentDidMount","fetchUser","componentDidUpdate","prevProps","prevState","console","log","then","setState","handleSearch","handleBuy","cost","window","alert","newStocks","slice","newStock","symbol","stockJSON","quantity","pricePurchased","latestPrice","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","stockIsOwned","newCombinedStock","index","push","newCash","newPortfolio","editedUser","fetch","method","body","JSON","stringify","headers","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  handleBuyProps,\n  IRootObject,\n  Stock,\n  userID,\n  userJSON,\n} from \"./interfaces\";\nimport \"./styles/PaperTrade.css\";\n\nimport PortfolioDetails from \"./components/PortfolioDetails\";\nimport SearchForm from \"./components/forms/SearchForm\";\nimport OwnedStockList from \"./components/OwnedStocksList\";\nimport Header from \"./components/header\";\n\nimport { getThisUserJSON } from \"./helpers\";\nimport TopTenStocksList from \"./components/TopTenStocksList\";\n\ntype PaperTradeProps = {\n  token: string;\n};\ntype PaperTradeState = {\n  token: string;\n  userJSON?: userJSON;\n  JSONOrString: IRootObject | string;\n};\n\nclass PaperTrade extends React.Component<PaperTradeProps, PaperTradeState> {\n  initialState = {\n    token: this.props.token,\n    userJSON: {\n      _id: {\n        $oid: \"\",\n      },\n      username: \"\",\n      password: \"\",\n      portfolio: {\n        name: \"\",\n        cash: 0,\n      },\n      stocks: [],\n    },\n    JSONOrString: \"\",\n  };\n  state = this.initialState;\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps: PaperTradeProps, prevState: PaperTradeState) {\n    console.log(\"helloo component is updating!\");\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      this.setState({\n        userJSON: userJSON,\n      });\n    });\n  }\n\n  handleSearch(JSONOrString: IRootObject | string) {\n    if (typeof JSONOrString === \"string\") {\n      this.setState({\n        JSONOrString: JSONOrString,\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString,\n      });\n    }\n  }\n\n  async handleBuy(props: handleBuyProps) {\n    console.log(\"handlebuy running\");\n    console.log(\"buy button pressed\");\n\n    if (props.cost > this.state.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n    console.log(\"user json is :\");\n    console.log(this.state.userJSON);\n    const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: props.quantity,\n      pricePurchased: props.stockJSON.latestPrice,\n    };\n\n    function combineTwoStocks(newStock: Stock, oldStock: Stock) {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased =\n        (newStock.quantity * newStock.pricePurchased +\n          oldStock.quantity * oldStock.pricePurchased) /\n        newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    }\n\n    if (props.stockIsOwned) {\n      console.log(\"hello\");\n      const newCombinedStock = combineTwoStocks(\n        newStock,\n        this.state.userJSON.stocks[props.index]\n      );\n      newStocks[props.index] = newCombinedStock;\n    } else {\n      newStocks.push(newStock);\n    }\n\n    const newCash = this.state.userJSON.portfolio.cash - props.cost;\n    const newPortfolio = {\n      name: this.state.userJSON.portfolio.name,\n      cash: newCash,\n    };\n\n    const editedUser = {\n      portfolio: newPortfolio,\n      stocks: newStocks,\n    };\n\n    await fetch(`http://localhost:5000/update/${this.state.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    this.fetchUser();\n  }\n\n  fetchUser() {\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      console.log(userJSON);\n      if (userJSON) {\n        this.setState({\n          userJSON: userJSON,\n        });\n      }\n    });\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n\n    return (\n      <div className=\"container\">\n        <Header username={this.state.userJSON.username} />\n        <PortfolioDetails portfolio={this.state.userJSON.portfolio} />\n        <SearchForm\n          userJSON={this.state.userJSON}\n          JSONOrString={this.state.JSONOrString}\n          handleSearch={this.handleSearch}\n          handleBuy={this.handleBuy}\n        />\n        <OwnedStockList stocks={this.state.userJSON.stocks} />\n        <TopTenStocksList />\n      </div>\n    );\n  }\n}\n\nexport default PaperTrade;\n"]},"metadata":{},"sourceType":"module"}