{"ast":null,"code":"export async function getStockJSON(ticker) {\n  try {\n    const response = await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const stockJSON = await response.json();\n    return stockJSON;\n  } catch {\n    return `Tried to fetch ${ticker}, but the stock wasn't found ):`;\n  }\n}\nexport async function getStockLatestPrice(symbol) {\n  return getStockJSON(symbol).then(stockJSON => {\n    if (typeof stockJSON === \"string\") {\n      return 0;\n    } else {\n      return stockJSON.latestPrice;\n    }\n  });\n}\nexport async function getThisUserJSON(token) {\n  const response = await fetch(`http://localhost:5000/auth/user`, {\n    method: \"GET\",\n    headers: {\n      \"x-auth-token\": token\n    }\n  });\n\n  if (response) {\n    const userJSON = await response.json();\n    return userJSON;\n  }\n}\nexport async function updateUser(editedUser, token) {\n  fetch(`http://localhost:5000/update/${editedUser._id}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedUser),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-auth-token\": token\n    }\n  });\n} // returns a valid index if the stock exists in the portfolio, otherwise returns -1\n\nexport function getStockIndex(userJSON, stock) {\n  const searchValue = stock.symbol;\n\n  const isStockSymbol = stock => {\n    return stock.symbol === searchValue;\n  };\n\n  const index = userJSON.stocks.findIndex(isStockSymbol);\n  return index;\n} // https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n// dan abramov set interval typescript version\n// export type IntervalFunction = () => unknown | void;\n// export function useInterval(callback: IntervalFunction, delay: number) {\n//   const savedCallback = useRef<IntervalFunction | null>(null);\n//   // Remember the latest callback.\n//   useEffect(() => {\n//     savedCallback.current = callback;\n//   });\n//   // Set up the interval.\n//   useEffect(() => {\n//     function tick() {\n//       if (savedCallback.current !== null) {\n//         savedCallback.current();\n//       }\n//     }\n//     const id = setInterval(tick, delay);\n//     return () => clearInterval(id);\n//   }, [delay]);\n// }","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/dashboard/helpers.tsx"],"names":["getStockJSON","ticker","response","fetch","stockJSON","json","getStockLatestPrice","symbol","then","latestPrice","getThisUserJSON","token","method","headers","userJSON","updateUser","editedUser","_id","body","JSON","stringify","getStockIndex","stock","searchValue","isStockSymbol","index","stocks","findIndex"],"mappings":"AAGA,OAAO,eAAeA,YAAf,CACLC,MADK,EAE0B;AAC/B,MAAI;AACF,UAAMC,QAAQ,GACZ,MAAMC,KAAK,CAAE,4CAA2CF,MAAO;AACrE,oFADiB,CADb;AAGA,UAAMG,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;AACA,WAAOD,SAAP;AACD,GAND,CAME,MAAM;AACN,WAAQ,kBAAiBH,MAAO,iCAAhC;AACD;AACF;AAED,OAAO,eAAeK,mBAAf,CAAmCC,MAAnC,EAAoE;AACzE,SAAOP,YAAY,CAACO,MAAD,CAAZ,CAAqBC,IAArB,CAA2BJ,SAAD,IAAe;AAC9C,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,SAAS,CAACK,WAAjB;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,eAAf,CAA+BC,KAA/B,EAA8C;AACnD,QAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAF,EAAoC;AAC9DS,IAAAA,MAAM,EAAE,KADsD;AAE9DC,IAAAA,OAAO,EAAE;AACP,sBAAgBF;AADT;AAFqD,GAApC,CAA5B;;AAMA,MAAIT,QAAJ,EAAc;AACZ,UAAMY,QAAQ,GAAG,MAAMZ,QAAQ,CAACG,IAAT,EAAvB;AACA,WAAOS,QAAP;AACD;AACF;AAED,OAAO,eAAeC,UAAf,CACLC,UADK,EAELL,KAFK,EAGS;AACdR,EAAAA,KAAK,CAAE,gCAA+Ba,UAAU,CAACC,GAAI,EAAhD,EAAmD;AACtDL,IAAAA,MAAM,EAAE,MAD8C;AAEtDM,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAFgD;AAGtDH,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,sBAAgBF;AAFT;AAH6C,GAAnD,CAAL;AAQD,C,CAED;;AACA,OAAO,SAASU,aAAT,CACLP,QADK,EAELQ,KAFK,EAGG;AACR,QAAMC,WAAW,GAAGD,KAAK,CAACf,MAA1B;;AACA,QAAMiB,aAAa,GAAIF,KAAD,IAAkB;AACtC,WAAOA,KAAK,CAACf,MAAN,KAAiBgB,WAAxB;AACD,GAFD;;AAGA,QAAME,KAAK,GAAGX,QAAQ,CAACY,MAAT,CAAgBC,SAAhB,CAA0BH,aAA1B,CAAd;AACA,SAAOC,KAAP;AACD,C,CAED;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { IRootObject, Stock, userJSON } from \"./interfaces\";\n\nexport async function getStockJSON(\n  ticker: string\n): Promise<IRootObject | string> {\n  try {\n    const response =\n      await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const stockJSON = await response.json();\n    return stockJSON;\n  } catch {\n    return `Tried to fetch ${ticker}, but the stock wasn't found ):`;\n  }\n}\n\nexport async function getStockLatestPrice(symbol: string): Promise<number> {\n  return getStockJSON(symbol).then((stockJSON) => {\n    if (typeof stockJSON === \"string\") {\n      return 0;\n    } else {\n      return stockJSON.latestPrice;\n    }\n  });\n}\n\nexport async function getThisUserJSON(token: string) {\n  const response = await fetch(`http://localhost:5000/auth/user`, {\n    method: \"GET\",\n    headers: {\n      \"x-auth-token\": token,\n    },\n  });\n  if (response) {\n    const userJSON = await response.json();\n    return userJSON;\n  }\n}\n\nexport async function updateUser(\n  editedUser: userJSON,\n  token: String\n): Promise<any> {\n  fetch(`http://localhost:5000/update/${editedUser._id}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedUser),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-auth-token\": token,\n    },\n  });\n}\n\n// returns a valid index if the stock exists in the portfolio, otherwise returns -1\nexport function getStockIndex(\n  userJSON: userJSON,\n  stock: Stock | IRootObject\n): number {\n  const searchValue = stock.symbol;\n  const isStockSymbol = (stock: Stock) => {\n    return stock.symbol === searchValue;\n  };\n  const index = userJSON.stocks.findIndex(isStockSymbol);\n  return index;\n}\n\n// https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n// dan abramov set interval typescript version\n// export type IntervalFunction = () => unknown | void;\n\n// export function useInterval(callback: IntervalFunction, delay: number) {\n//   const savedCallback = useRef<IntervalFunction | null>(null);\n\n//   // Remember the latest callback.\n//   useEffect(() => {\n//     savedCallback.current = callback;\n//   });\n\n//   // Set up the interval.\n//   useEffect(() => {\n//     function tick() {\n//       if (savedCallback.current !== null) {\n//         savedCallback.current();\n//       }\n//     }\n//     const id = setInterval(tick, delay);\n//     return () => clearInterval(id);\n//   }, [delay]);\n// }\n"]},"metadata":{},"sourceType":"module"}