{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockRow(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [latestPrice, setLatestPrice] = useState([0, 0]);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\"); // https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n  // dan abramov set interval typescript version\n\n  function useInterval(callback, delay) {\n    _s();\n\n    const savedCallback = useRef(null); // Remember the latest callback.\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }); // Set up the interval.\n\n    useEffect(() => {\n      function tick() {\n        if (savedCallback.current !== null) {\n          savedCallback.current();\n        }\n      }\n\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n  }\n\n  _s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\n  const fetchPrice = async () => {\n    const newLatestPrice = latestPrice.slice(); // console.log(`inital is ${newLatestPrice}`)\n\n    getStockLatestPrice(props.stock.symbol).then(price => {\n      newLatestPrice.push(price); // console.log(`before setting latest price to ${newLatestPrice}`)\n\n      return newLatestPrice.slice(1, 3);\n    }).then(newLatestPrice => {\n      console.log(`sliced setting latest price to ${newLatestPrice}`);\n      setLatestPrice(newLatestPrice);\n    });\n  };\n\n  useInterval(() => {\n    fetchPrice();\n\n    if (latestPrice[1] > latestPrice[0]) {\n      setLatestPriceFontColor(\"green\");\n      console.log(\"green\"); // setLatestPrice(newPrice)\n    } else {\n      setLatestPriceFontColor(\"red\");\n      console.log(\"red\"); // setLatestPrice(newPrice)\n    }\n  }, 1000); //initial price, runs once\n\n  useLayoutEffect(() => {\n    fetchPrice();\n  }, []); // sets latest price every 5 seconds\n  // useEffect (() => {\n  //   // console.log(`${latestPrice}`)\n  //   if (latestPrice[1] > latestPrice[0]) {\n  //     setLatestPriceFontColor(\"green\")\n  //     // setLatestPrice(newPrice)\n  //   } else {\n  //     setLatestPriceFontColor(\"red\")\n  //     // setLatestPrice(newPrice)\n  //   }\n  //   const interval = setInterval(() => {\n  //     fetchPrice()\n  //   }, 1000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        color: latestPriceFontColor\n      },\n      children: latestPrice[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.pricePurchased\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice[1] * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice[1] * props.stock.quantity - props.stock.pricePurchased * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(StockRow, \"qQRwPWHMfxexm20ZSha92LqiDY0=\", false, function () {\n  return [useInterval];\n});\n\n_c = StockRow;\nexport default function StockList(props) {\n  // console.log(\"stocklist refreshing but why\")\n  // This method will map out the records on the table\n  const StocksToTable = stockList => {\n    return stockList.map(stock => /*#__PURE__*/_jsxDEV(StockRow, {\n      stock: stock //deleteStock={() => deleteStock(stock._id)}\n\n    }, stock.symbol, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this));\n  }; // This following section will display the table with the records of individuals.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Stock List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latest Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price Purchased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: StocksToTable(props.stocks)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 4\n  }, this);\n}\n_c2 = StockList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockRow\");\n$RefreshReg$(_c2, \"StockList\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx"],"names":["React","useEffect","useLayoutEffect","useRef","useState","getStockLatestPrice","StockRow","props","latestPrice","setLatestPrice","latestPriceFontColor","setLatestPriceFontColor","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","fetchPrice","newLatestPrice","slice","stock","symbol","then","price","push","console","log","color","quantity","pricePurchased","toFixed","StockList","StocksToTable","stockList","map","stocks"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { Stock } from \"../interfaces\";\n\ninterface stockRowProps {\n  stock: Stock\n  //deleteStock: any\n  key: string\n}\n\n\nfunction StockRow(props: stockRowProps) {\n  const[latestPrice, setLatestPrice] = useState([0,0]);\n  const[latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\")\n\n\n  // https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n  // dan abramov set interval typescript version\n  type IntervalFunction = () => ( unknown | void )\n\n  function useInterval( callback: IntervalFunction, delay: number ) {\n\n    const savedCallback = useRef<IntervalFunction| null>( null )\n  \n    // Remember the latest callback.\n    useEffect( () => {\n      savedCallback.current = callback\n    } )\n  \n    // Set up the interval.\n    useEffect( () => {\n      function tick() {\n        if ( savedCallback.current !== null ) {\n          savedCallback.current()\n        }\n      }\n      const id = setInterval( tick, delay )\n      return () => clearInterval( id )\n  \n    }, [ delay ] )\n  }\n\n  const fetchPrice = async () => {\n    const newLatestPrice = latestPrice.slice()\n    // console.log(`inital is ${newLatestPrice}`)\n\n    getStockLatestPrice(props.stock.symbol).then((price) => {\n      newLatestPrice.push(price)\n      // console.log(`before setting latest price to ${newLatestPrice}`)\n      return newLatestPrice.slice(1,3)\n    }).then((newLatestPrice) => {\n      console.log(`sliced setting latest price to ${newLatestPrice}`)\n      setLatestPrice(newLatestPrice)\n    })\n  }\n\n  useInterval(() => {\n    fetchPrice();\n    if (latestPrice[1] > latestPrice[0]) {\n      setLatestPriceFontColor(\"green\")\n      console.log(\"green\")\n      // setLatestPrice(newPrice)\n    } else {\n      setLatestPriceFontColor(\"red\")\n      console.log(\"red\")\n      // setLatestPrice(newPrice)\n    }\n  }, 1000);\n\n  //initial price, runs once\n  useLayoutEffect (() => {\n    fetchPrice() \n  }, []); \n\n  // sets latest price every 5 seconds\n  // useEffect (() => {\n  //   // console.log(`${latestPrice}`)\n  //   if (latestPrice[1] > latestPrice[0]) {\n  //     setLatestPriceFontColor(\"green\")\n  //     // setLatestPrice(newPrice)\n  //   } else {\n  //     setLatestPriceFontColor(\"red\")\n  //     // setLatestPrice(newPrice)\n  //   }\n\n  //   const interval = setInterval(() => {\n  //     fetchPrice()\n  //   }, 1000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n  return(\n    <tr>\n      <td>{props.stock.symbol}</td>\n      <td style={{color: latestPriceFontColor}}>{latestPrice[1]}</td>\n      <td>{props.stock.quantity}</td>\n      <td>{props.stock.pricePurchased}</td>\n      <td>{+(latestPrice[1]*props.stock.quantity).toFixed(2)}</td>\n      <td>{+(latestPrice[1]*props.stock.quantity-props.stock.pricePurchased*props.stock.quantity).toFixed(2)}</td>\n    </tr>\n  )\n}\n \n\ninterface stockListProps {\n  stocks: Stock[]\n}\nexport default function StockList(props: stockListProps) {\n  // console.log(\"stocklist refreshing but why\")\n \n // This method will map out the records on the table\n const StocksToTable = (stockList: Stock[]) => {\n  return (\n    stockList.map((stock =>\n      <StockRow\n           stock={stock}\n           //deleteStock={() => deleteStock(stock._id)}\n           key={stock.symbol}\n         />\n    )))\n }\n \n // This following section will display the table with the records of individuals.\n return (\n   <div>\n     <h3>Stock List</h3>\n     <table>\n       <thead>\n         <tr>\n           <th>Symbol</th>\n           <th>Latest Price</th>\n           <th>Quantity</th>\n           <th>Price Purchased</th>\n           <th>Value</th>\n           <th>Net Value</th>\n         </tr>\n       </thead>\n       <tbody>{StocksToTable(props.stocks)}</tbody>\n     </table>\n   </div>\n );\n}"]},"metadata":{},"sourceType":"module"}