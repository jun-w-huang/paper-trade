{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx\";\nimport React from \"react\";\nimport \"./styles/PaperTrade.css\";\nimport PortfolioDetails from \"./components/PortfolioDetails\";\nimport SearchForm from \"./components/forms/SearchForm\";\nimport OwnedStockList from \"./components/OwnedStocksList\";\nimport Header from \"./components/header\";\nimport { getStockIndex, getThisUserJSON } from \"./helpers\";\nimport TopTenStocksList from \"./components/TopTenStocksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PaperTrade extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.initialState = {\n      token: this.props.token,\n      userJSON: {\n        _id: {\n          $oid: \"\"\n        },\n        username: \"\",\n        password: \"\",\n        portfolio: {\n          name: \"\",\n          cash: 0\n        },\n        stocks: []\n      },\n      JSONOrString: \"\"\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"helloo component is updating!\");\n    getThisUserJSON(this.props.token).then(userJSON => {\n      var _prevState$userJSON;\n\n      if (userJSON.stocks !== ((_prevState$userJSON = prevState.userJSON) === null || _prevState$userJSON === void 0 ? void 0 : _prevState$userJSON.stocks) && typeof prevState.userJSON !== \"undefined\" && prevState.userJSON.stocks[1].symbol !== userJSON.stocks[1].symbol) {\n        this.setState({\n          userJSON: userJSON\n        });\n      }\n    });\n  }\n\n  handleSearch(JSONOrString) {\n    if (typeof JSONOrString === \"string\") {\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    }\n  }\n\n  async handleBuy(props) {\n    console.log(\"handlebuy running\");\n    console.log(\"buy button pressed\");\n    getThisUserJSON(this.props.token).then(userJSON => {\n      this.setState({\n        userJSON: userJSON\n      });\n    }).then(() => {\n      if (props.cost > this.state.userJSON.portfolio.cash) {\n        window.alert(\"You don't have enough cash to buy this stock!\");\n        return;\n      }\n\n      console.log(\"user json is :\");\n      console.log(this.state.userJSON);\n      const newStocks = this.state.userJSON.stocks.slice();\n      const newStock = {\n        symbol: props.stockJSON.symbol,\n        quantity: props.quantity,\n        pricePurchased: props.stockJSON.latestPrice\n      };\n\n      function combineTwoStocks(newStock, oldStock) {\n        // quantity will be the sum of both,\n        // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n        // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n        // 1*10 = 10, 2*20 = 40, 50/3\n        const newTotalQuantity = newStock.quantity + oldStock.quantity;\n        const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n        newStock.quantity = newTotalQuantity;\n        newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n        return newStock;\n      }\n\n      const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n      if (index !== -1) {\n        console.log(\"stock exists\");\n        const newCombinedStock = combineTwoStocks(newStock, this.state.userJSON.stocks[index]);\n        newStocks[index] = newCombinedStock;\n      } else {\n        newStocks.push(newStock);\n      }\n\n      const newCash = this.state.userJSON.portfolio.cash - props.cost;\n      const newPortfolio = {\n        name: this.state.userJSON.portfolio.name,\n        cash: newCash\n      };\n      const editedUser = {\n        portfolio: newPortfolio,\n        stocks: newStocks\n      };\n      fetch(`http://localhost:5000/update/${this.state.userJSON._id}`, {\n        method: \"POST\",\n        body: JSON.stringify(editedUser),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(() => {\n        this.fetchUser();\n      });\n    });\n  }\n\n  fetchUser() {\n    getThisUserJSON(this.props.token).then(userJSON => {\n      if (userJSON) {\n        this.setState({\n          userJSON: userJSON\n        });\n      }\n    });\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        username: this.state.userJSON.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n        portfolio: this.state.userJSON.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        userJSON: this.state.userJSON,\n        JSONOrString: this.state.JSONOrString,\n        handleSearch: this.handleSearch,\n        handleBuy: this.handleBuy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OwnedStockList, {\n        stocks: this.state.userJSON.stocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopTenStocksList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PaperTrade;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx"],"names":["React","PortfolioDetails","SearchForm","OwnedStockList","Header","getStockIndex","getThisUserJSON","TopTenStocksList","PaperTrade","Component","initialState","token","props","userJSON","_id","$oid","username","password","portfolio","name","cash","stocks","JSONOrString","state","componentDidMount","fetchUser","componentDidUpdate","prevProps","prevState","then","symbol","setState","handleSearch","handleBuy","console","log","cost","window","alert","newStocks","slice","newStock","stockJSON","quantity","pricePurchased","latestPrice","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","index","newCombinedStock","push","newCash","newPortfolio","editedUser","fetch","method","body","JSON","stringify","headers","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { handleBuyProps, IRootObject, Stock, userJSON } from \"./interfaces\";\nimport \"./styles/PaperTrade.css\";\n\nimport PortfolioDetails from \"./components/PortfolioDetails\";\nimport SearchForm from \"./components/forms/SearchForm\";\nimport OwnedStockList from \"./components/OwnedStocksList\";\nimport Header from \"./components/header\";\n\nimport { getStockIndex, getThisUserJSON } from \"./helpers\";\nimport TopTenStocksList from \"./components/TopTenStocksList\";\n\ntype PaperTradeProps = {\n  token: string;\n};\ntype PaperTradeState = {\n  token: string;\n  userJSON?: userJSON;\n  JSONOrString: IRootObject | string;\n};\n\nclass PaperTrade extends React.Component<PaperTradeProps, PaperTradeState> {\n  initialState = {\n    token: this.props.token,\n    userJSON: {\n      _id: {\n        $oid: \"\",\n      },\n      username: \"\",\n      password: \"\",\n      portfolio: {\n        name: \"\",\n        cash: 0,\n      },\n      stocks: [],\n    },\n    JSONOrString: \"\",\n  };\n  state = this.initialState;\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps: PaperTradeProps, prevState: PaperTradeState) {\n    // console.log(\"helloo component is updating!\");\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      if (\n        userJSON.stocks !== prevState.userJSON?.stocks &&\n        typeof prevState.userJSON !== \"undefined\" &&\n        prevState.userJSON.stocks[1].symbol !== userJSON.stocks[1].symbol\n      ) {\n        this.setState({\n          userJSON: userJSON,\n        });\n      }\n    });\n  }\n\n  handleSearch(JSONOrString: IRootObject | string) {\n    if (typeof JSONOrString === \"string\") {\n      this.setState({\n        JSONOrString: JSONOrString,\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString,\n      });\n    }\n  }\n\n  async handleBuy(props: handleBuyProps) {\n    console.log(\"handlebuy running\");\n    console.log(\"buy button pressed\");\n\n    getThisUserJSON(this.props.token)\n      .then((userJSON) => {\n        this.setState({\n          userJSON: userJSON,\n        });\n      })\n      .then(() => {\n        if (props.cost > this.state.userJSON.portfolio.cash) {\n          window.alert(\"You don't have enough cash to buy this stock!\");\n          return;\n        }\n\n        console.log(\"user json is :\");\n        console.log(this.state.userJSON);\n        const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n        const newStock = {\n          symbol: props.stockJSON.symbol,\n          quantity: props.quantity,\n          pricePurchased: props.stockJSON.latestPrice,\n        };\n\n        function combineTwoStocks(newStock: Stock, oldStock: Stock) {\n          // quantity will be the sum of both,\n          // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n          // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n          // 1*10 = 10, 2*20 = 40, 50/3\n          const newTotalQuantity = newStock.quantity + oldStock.quantity;\n          const newAveragePricePurchased =\n            (newStock.quantity * newStock.pricePurchased +\n              oldStock.quantity * oldStock.pricePurchased) /\n            newTotalQuantity;\n          newStock.quantity = newTotalQuantity;\n          newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n          return newStock;\n        }\n\n        const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n        if (index !== -1) {\n          console.log(\"stock exists\");\n          const newCombinedStock = combineTwoStocks(\n            newStock,\n            this.state.userJSON.stocks[index]\n          );\n          newStocks[index] = newCombinedStock;\n        } else {\n          newStocks.push(newStock);\n        }\n\n        const newCash = this.state.userJSON.portfolio.cash - props.cost;\n        const newPortfolio = {\n          name: this.state.userJSON.portfolio.name,\n          cash: newCash,\n        };\n\n        const editedUser = {\n          portfolio: newPortfolio,\n          stocks: newStocks,\n        };\n\n        fetch(`http://localhost:5000/update/${this.state.userJSON._id}`, {\n          method: \"POST\",\n          body: JSON.stringify(editedUser),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }).then(() => {\n          this.fetchUser();\n        });\n      });\n  }\n\n  fetchUser() {\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      if (userJSON) {\n        this.setState({\n          userJSON: userJSON,\n        });\n      }\n    });\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n\n    return (\n      <div className=\"container\">\n        <Header username={this.state.userJSON.username} />\n        <PortfolioDetails portfolio={this.state.userJSON.portfolio} />\n        <SearchForm\n          userJSON={this.state.userJSON}\n          JSONOrString={this.state.JSONOrString}\n          handleSearch={this.handleSearch}\n          handleBuy={this.handleBuy}\n        />\n        <OwnedStockList stocks={this.state.userJSON.stocks} />\n        <TopTenStocksList />\n      </div>\n    );\n  }\n}\n\nexport default PaperTrade;\n"]},"metadata":{},"sourceType":"module"}