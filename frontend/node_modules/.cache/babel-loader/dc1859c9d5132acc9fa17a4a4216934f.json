{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/CreatePortfolio.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { getThisUserJSON } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface CreatePortfolioProps {\n//   userJSON: userJSON;\n// }\nexport default function CreatePortfolio(props) {\n  _s();\n\n  const [formData, setFormData] = useState({\n    name: \"Your portfolio name\",\n    cash: 1000000\n  });\n  const [userID, setUserID] = useState(\"\");\n\n  const user = () => {\n    getThisUserJSON(props.token).then(userJSON => {\n      if (userJSON) {\n        setUserID(userJSON._id);\n      }\n    });\n  };\n\n  function updateFormData(value) {\n    return setFormData(prev => {\n      return { ...prev,\n        ...value\n      };\n    });\n  }\n\n  const onSubmit = async e => {\n    e.preventDefault(); // validate?\n\n    const editedUser = {\n      portfolio: {\n        name: formData.name,\n        cash: formData.cash\n      },\n      stocks: []\n    };\n    let userJSON = user;\n    fetch(`http://localhost:5000/update/${userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"createPortfolioContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"createPortfolioForm\",\n      onSubmit: e => onSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"portfolioNameInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"portfolioName\",\n          children: \"Your portfolio name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"portfolioName\",\n          defaultValue: \"My First Portfolio\",\n          onChange: e => updateFormData({\n            portfolioName: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"cashInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"cashInput\",\n          children: \"Starting Cash: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"cashInput\",\n          defaultValue: \"100000\",\n          onChange: e => updateFormData({\n            cash: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreatePortfolio, \"Ve8/kb+o3xUwnbmTfqjtjSqBzD8=\");\n\n_c = CreatePortfolio;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePortfolio\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/CreatePortfolio.tsx"],"names":["useState","getThisUserJSON","CreatePortfolio","props","formData","setFormData","name","cash","userID","setUserID","user","token","then","userJSON","_id","updateFormData","value","prev","onSubmit","e","preventDefault","editedUser","portfolio","stocks","fetch","method","body","JSON","stringify","headers","portfolioName","target"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { getThisUserJSON } from \"../helpers\";\nimport { userJSON } from \"../interfaces\";\n\ntype CreatePortfolioProps = {\n  token: string;\n};\n\n// interface CreatePortfolioProps {\n//   userJSON: userJSON;\n// }\n\nexport default function CreatePortfolio(props: CreatePortfolioProps) {\n  const [formData, setFormData] = useState({\n    name: \"Your portfolio name\",\n    cash: 1000000,\n  });\n\n  const [userID, setUserID] = useState(\"\");\n\n  const user = () => {\n    getThisUserJSON(props.token).then((userJSON) => {\n      if (userJSON) {\n        setUserID(userJSON._id);\n      }\n    });\n  };\n\n  function updateFormData(value: any) {\n    return setFormData((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    // validate?\n    const editedUser = {\n      portfolio: {\n        name: formData.name,\n        cash: formData.cash,\n      },\n      stocks: [],\n    };\n\n    let userJSON = user;\n\n    fetch(`http://localhost:5000/update/${userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  };\n\n  return (\n    <div id=\"createPortfolioContainer\">\n      <form id=\"createPortfolioForm\" onSubmit={(e) => onSubmit(e)}>\n        <div id=\"portfolioNameInput\">\n          <label htmlFor=\"portfolioName\">Your portfolio name: </label>\n          <input\n            type=\"text\"\n            id=\"portfolioName\"\n            defaultValue=\"My First Portfolio\"\n            onChange={(e) => updateFormData({ portfolioName: e.target.value })}\n          />\n        </div>\n        <div id=\"cashInput\">\n          <label htmlFor=\"cashInput\">Starting Cash: </label>\n          <input\n            type=\"text\"\n            id=\"cashInput\"\n            defaultValue=\"100000\"\n            onChange={(e) => updateFormData({ cash: e.target.value })}\n          />\n        </div>\n        <input type=\"submit\" value=\"Create\" />\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}