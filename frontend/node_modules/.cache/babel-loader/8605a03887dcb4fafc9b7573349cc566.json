{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { getStockIndex } from \"../../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BuyAndSellForm(props) {\n  _s();\n\n  // console.log(`user id is ${props.userJSON._id}`)\n  const [quantity, setQuantity] = useState(100);\n  const [cost, setCost] = useState(0); // const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n  useEffect(() => {\n    console.log(\"use effect triggered\");\n    setCost(quantity * props.stockJSON.latestPrice);\n  });\n\n  const onChange = e => {\n    setQuantity(parseInt(e.target.value));\n    setCost(parseInt(e.target.value) * props.stockJSON.latestPrice);\n  };\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (cost > props.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: quantity,\n      pricePurchased: props.stockJSON.latestPrice\n    };\n\n    const stockInDatabase = symbol => {\n      console.log(\"stock is owned by the user already!\");\n      return symbol in props.userJSON.stocks;\n    };\n\n    const combineTwoStocks = (newStock, oldStock) => {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    };\n\n    if (stockInDatabase(props.stockJSON.symbol)) {\n      const index = getStockIndex(props.userJSON, props.stockJSON);\n      const newCombinedStock = combineTwoStocks(newStock, props.userJSON.stocks[index]);\n      newStocks[index] = newCombinedStock;\n    } else {\n      newStocks.push(newStock);\n    }\n\n    const newCash = props.userJSON.portfolio.cash - cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash\n    };\n    const editedUser = {\n      \"portfolio\": newPortfolio,\n      \"stocks\": newStocks\n    };\n    console.log(editedUser);\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(\"submitting buy form\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BuyForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"quantity\",\n        defaultValue: \"100\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        name: \"buyButton\",\n        value: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cost / Revenue: \", cost.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BuyAndSellForm, \"Db7ThwWM8SMecP96hLW7kz4hKhw=\");\n\n_c = BuyAndSellForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyAndSellForm\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx"],"names":["React","useEffect","useState","getStockIndex","BuyAndSellForm","props","quantity","setQuantity","cost","setCost","console","log","stockJSON","latestPrice","onChange","e","parseInt","target","value","onSubmit","preventDefault","userJSON","portfolio","cash","window","alert","newStocks","stocks","slice","newStock","symbol","pricePurchased","stockInDatabase","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","index","newCombinedStock","push","newCash","newPortfolio","name","editedUser","fetch","_id","method","body","JSON","stringify","headers"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { getStockIndex } from \"../../helpers\";\nimport { IRootObject, Portfolio, Stock, userJSON } from \"../../interfaces\";\n\ninterface BuyAndSellFormProps {\n    userJSON: userJSON\n    stockJSON : IRootObject\n}\n\n\nexport default function BuyAndSellForm(props: BuyAndSellFormProps){\n    // console.log(`user id is ${props.userJSON._id}`)\n\n    const [quantity, setQuantity] = useState(100)\n\n    const [cost, setCost] = useState(0);\n    // const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n    useEffect(() => {\n        console.log(\"use effect triggered\")\n        setCost(quantity*props.stockJSON.latestPrice)\n    });\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setQuantity(parseInt(e.target.value))\n        setCost(parseInt(e.target.value)*props.stockJSON.latestPrice)\n    };\n\n    async function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n\n        if (cost > props.userJSON.portfolio.cash) {\n            window.alert(\"You don't have enough cash to buy this stock!\")\n            return;\n        }\n\n        const newStocks = props.userJSON.stocks.slice()\n\n        const newStock = {\n            symbol: props.stockJSON.symbol,\n            quantity: quantity,\n            pricePurchased: props.stockJSON.latestPrice,\n        }\n\n        const stockInDatabase = (symbol: string) => {\n            console.log(\"stock is owned by the user already!\")\n            return (symbol in props.userJSON.stocks)\n        }\n\n        const combineTwoStocks = (newStock: Stock, oldStock: Stock) => {\n            // quantity will be the sum of both,\n            // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n            // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n            // 1*10 = 10, 2*20 = 40, 50/3\n            const newTotalQuantity = newStock.quantity + oldStock.quantity;\n            const newAveragePricePurchased = \n                (newStock.quantity * newStock.pricePurchased\n                + oldStock.quantity * oldStock.pricePurchased)\n                / (newTotalQuantity);\n            newStock.quantity = newTotalQuantity;\n            newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n            return newStock\n        }\n\n        if (stockInDatabase(props.stockJSON.symbol)) {\n            const index = getStockIndex(props.userJSON, props.stockJSON)\n            const newCombinedStock = combineTwoStocks(newStock, props.userJSON.stocks[index])\n            newStocks[index] = newCombinedStock\n        } else {\n            newStocks.push(newStock)\n        }\n\n        const newCash = props.userJSON.portfolio.cash - cost;\n        const newPortfolio = {\n            name: props.userJSON.portfolio.name,\n            cash: newCash,\n        }\n\n        const editedUser = {\n            \"portfolio\": newPortfolio,\n            \"stocks\": newStocks\n          };\n\n        console.log(editedUser)\n\n        await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n            'Content-Type': 'application/json'\n            },\n        });\n        console.log(\"submitting buy form\")\n    }\n\n    return(\n        <div id=\"BuyForm\">\n            <form onSubmit={onSubmit}>\n                <label htmlFor=\"quantity\">Quantity: </label>\n                <input type=\"text\" id=\"quantity\" defaultValue=\"100\" onChange={onChange}/>\n                <input type=\"submit\" name=\"buyButton\" value=\"Buy\"/>\n                {/* <input type=\"button\" hidden={sellButtonVisibility} value=\"Sell\" onClick={() => onSell()}/> */}\n                {/* <Link className=\"btn btn-link\" to={`/edit/${props.userJSON._id}`}>Edit</Link> */}\n            </form>\n            <p>Cost / Revenue: {cost.toFixed(2)}</p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}