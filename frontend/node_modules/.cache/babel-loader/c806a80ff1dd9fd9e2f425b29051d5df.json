{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultFormData = {\n  quantity: \"100\"\n};\n\nfunction BuyAndSellForm(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  console.log(\"buy form re rendering\");\n  const [formData, setFormData] = useState(defaultFormData);\n  const {\n    quantity\n  } = formData;\n  const [cost, setCost] = useState(0);\n  const [sellButtonVisibility, setSellButtonVisibility] = useState(false);\n  useEffect(() => {\n    console.log(\"use effect triggered\"); // if (getStockIndex(props.portfolio, props.stockJSON) !== -1) {\n    //     setSellButtonVisibility(false)\n    // } else {\n    //     setSellButtonVisibility(true)\n    // }\n\n    setCost(parseInt(quantity) * props.stockJSON.latestPrice);\n  });\n\n  const onChange = e => {\n    setFormData(prevState => ({ ...prevState,\n      [e.target.id]: e.target.value\n    }));\n    setCost(parseInt(e.target.value) * props.stockJSON.latestPrice);\n  };\n\n  const onSubmit = e => {\n    _s();\n\n    e.preventDefault();\n    const params = useParams();\n\n    async function fetchData() {\n      if (params.id !== undefined) {\n        const id = params.id.toString();\n        const response = await fetch(`http://localhost:5000/stocks/${params.id.toString()}`);\n\n        if (!response.ok) {\n          const message = `An error has occured: ${response.statusText}`;\n          window.alert(message);\n          return;\n        }\n\n        const user = await response.json();\n\n        if (!user) {\n          window.alert(`User with id ${id} not found`); //   navigate(\"/\");\n\n          return;\n        } else {\n          console.log(user);\n        }\n      } else {\n        window.alert(\"params id is undefined error\");\n        return;\n      } // setForm(record);\n\n    }\n\n    fetchData(); // props.handleBuy(cost, parseInt(quantity), props.stockJSON)\n  };\n\n  _s(onSubmit, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n    return [useParams];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BuyForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"quantity\",\n        defaultValue: \"100\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        name: \"buyButton\",\n        value: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        hidden: sellButtonVisibility,\n        value: \"Sell\",\n        onClick: () => onSell()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cost / Revenue: \", cost.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(BuyAndSellForm, \"sBjNTQNGwCAPKsDHwoygjVnl8lU=\");\n\n_c = BuyAndSellForm;\nexport default BuyAndSellForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyAndSellForm\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx"],"names":["React","useEffect","useState","useParams","defaultFormData","quantity","BuyAndSellForm","props","console","log","formData","setFormData","cost","setCost","sellButtonVisibility","setSellButtonVisibility","parseInt","stockJSON","latestPrice","onChange","e","prevState","target","id","value","onSubmit","preventDefault","params","fetchData","undefined","toString","response","fetch","ok","message","statusText","window","alert","user","json","onSell","toFixed"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { IRootObject, Portfolio } from \"../../interfaces\";\n\ninterface BuyAndSellFormProps {\n    stockJSON : IRootObject\n    portfolio: Portfolio\n    // handleBuy: (cost: number, quantity: number, stockJSON: IRootObject) => void\n}\n\nconst defaultFormData = {\n    quantity: \"100\",\n  };\n\nfunction BuyAndSellForm(props: BuyAndSellFormProps): ReactElement {\n    console.log(\"buy form re rendering\")\n    const [formData, setFormData] = useState(defaultFormData);\n\n    const { quantity } = formData\n    const [cost, setCost] = useState(0);\n    const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n    useEffect(() => {\n        console.log(\"use effect triggered\")\n        // if (getStockIndex(props.portfolio, props.stockJSON) !== -1) {\n        //     setSellButtonVisibility(false)\n        // } else {\n        //     setSellButtonVisibility(true)\n        // }\n        setCost(parseInt(quantity)*props.stockJSON.latestPrice)\n    });\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFormData((prevState) => ({\n        ...prevState,\n        [e.target.id]: e.target.value,\n        }));\n        setCost(parseInt(e.target.value)*props.stockJSON.latestPrice)\n    };\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const params = useParams();\n        \n        async function fetchData() {\n            if (params.id !== undefined) {\n                const id = params.id.toString();\n                const response = await fetch(`http://localhost:5000/stocks/${params.id.toString()}`);\n                if (!response.ok) {\n                    const message = `An error has occured: ${response.statusText}`;\n                    window.alert(message);\n                    return;\n                  }              \n                  const user = await response.json();\n                  if (!user) {\n                    window.alert(`User with id ${id} not found`);\n                  //   navigate(\"/\");\n                    return;\n                  } else {\n                      console.log(user)\n                  }\n            } else {\n                window.alert(\"params id is undefined error\")\n                return\n            }\n            // setForm(record);\n          }\n        \n          fetchData();\n        // props.handleBuy(cost, parseInt(quantity), props.stockJSON)\n    }\n\n    return(\n        <div id=\"BuyForm\">\n            <form onSubmit={onSubmit}>\n                <label htmlFor=\"quantity\">Quantity: </label>\n                <input type=\"text\" id=\"quantity\" defaultValue=\"100\" onChange={onChange}/>\n                <input type=\"submit\" name=\"buyButton\" value=\"Buy\"/>\n                <input type=\"button\" hidden={sellButtonVisibility} value=\"Sell\" onClick={() => onSell()}/>\n            </form>\n            <p>Cost / Revenue: {cost.toFixed(2)}</p>\n        </div>\n    )\n}\n\n\n\nexport default BuyAndSellForm;"]},"metadata":{},"sourceType":"module"}