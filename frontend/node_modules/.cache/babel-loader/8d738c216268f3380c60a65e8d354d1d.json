{"ast":null,"code":"export async function getStockJSON(ticker) {\n  // console.log(`fetching ${ticker} JSON `);\n  // const string = '{\"avgTotalVolume\":102907144,\"calculationPrice\":\"close\",\"change\":2.89,\"changePercent\":0.01678,\"close\":175.08,\"closeSource\":\"official\",\"closeTime\":1641934800998,\"companyName\":\"Apple Inc\",\"currency\":\"USD\",\"delayedPrice\":175.12,\"delayedPriceTime\":1641934794061,\"extendedChange\":0.16,\"extendedChangePercent\":0.00091,\"extendedPrice\":175.24,\"extendedPriceTime\":1641949197193,\"high\":175.18,\"highSource\":\"15 minute delayed price\",\"highTime\":1641934813503,\"iexAskPrice\":0,\"iexAskSize\":0,\"iexBidPrice\":0,\"iexBidSize\":0,\"iexClose\":174.93,\"iexCloseTime\":1641934798642,\"iexLastUpdated\":1641934798642,\"iexMarketPercent\":0.012563814998690337,\"iexOpen\":172.38,\"iexOpenTime\":1641911400308,\"iexRealtimePrice\":174.93,\"iexRealtimeSize\":100,\"iexVolume\":956582,\"lastTradeTime\":1641934799659,\"latestPrice\":175.08,\"latestSource\":\"Close\",\"latestTime\":\"January 11, 2022\",\"latestUpdate\":1641934800998,\"latestVolume\":76137861,\"low\":170.82,\"lowSource\":\"15 minute delayed price\",\"lowTime\":1641912928335,\"marketCap\":2859821674680,\"oddLotDelayedPrice\":175.01,\"oddLotDelayedPriceTime\":1641934795584,\"open\":172.19,\"openTime\":1641911402394,\"openSource\":\"official\",\"peRatio\":15.59,\"previousClose\":172.19,\"previousVolume\":106765552,\"primaryExchange\":\"NASDAQ\",\"symbol\":\"AAPL\",\"volume\":76137861,\"week52High\":182.94,\"week52Low\":115.67,\"ytdChange\":-0.01351791068311083,\"isUSMarketOpen\":false}'\n  // const stockJSON = JSON.parse(string)\n  // return stockJSON\n  try {\n    const response = await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n    ?token=Tpk_dec7b122df1e4bce8e1ebe0e6632fc06`);\n    const stockJSON = await response.json();\n    return stockJSON;\n  } catch {\n    return `Tried to fetch ${ticker}, but the stock wasn't found ):`;\n  }\n}\nexport async function getStockLatestPrice(symbol) {\n  return getStockJSON(symbol).then(stockJSON => {\n    if (typeof stockJSON === 'string') {\n      return 0;\n    } else {\n      return stockJSON.latestPrice;\n    }\n  });\n}\nexport async function getAllUserJSON() {\n  const response = await fetch(`http://localhost:5000/stocks/`);\n  console.log(\"trying to get all users\");\n\n  if (!response.ok) {\n    const message = `An error occured: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  const users = await response.json();\n  return users;\n}\n;\nexport async function getThisUserJSON(username) {\n  getAllUserJSON().then(users => {\n    if (users) {\n      for (const user of users) {\n        if (user.username === username) {\n          console.log(`user is ${user}`);\n          return user;\n        } else {\n          console.log(\"error here\");\n          return \"ERROR\";\n        }\n      }\n    }\n  });\n  return \"Error\";\n}\n; // returns a valid index if the stock exists in the portfolio, otherwise returns -1\n// export function getStockIndex(portfolio: Portfolio, stock: Stock | IRootObject ): any {\n//     const searchValue = stock.symbol\n//     const isStockSymbol = (stock: Stock) => {\n//         return stock.symbol === searchValue\n//     }\n//     const index = portfolio.stocks.findIndex(isStockSymbol)\n//     return index\n// }","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/helpers.tsx"],"names":["getStockJSON","ticker","response","fetch","stockJSON","json","getStockLatestPrice","symbol","then","latestPrice","getAllUserJSON","console","log","ok","message","statusText","window","alert","users","getThisUserJSON","username","user"],"mappings":"AAEA,OAAO,eAAeA,YAAf,CAA4BC,MAA5B,EAA2E;AAC9E;AACA;AACA;AACA;AACA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2CF,MAAO;AACxF,gDADoC,CAA5B;AAEA,UAAMG,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;AACA,WAAOD,SAAP;AACH,GALD,CAKE,MAAM;AACJ,WAAQ,kBAAiBH,MAAO,iCAAhC;AACH;AACJ;AAED,OAAO,eAAeK,mBAAf,CAAmCC,MAAnC,EAAoE;AACvE,SAAOP,YAAY,CAACO,MAAD,CAAZ,CAAqBC,IAArB,CAA2BJ,SAAS,IAAI;AAC3C,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,aAAO,CAAP;AACH,KAFD,MAEO;AACH,aAAOA,SAAS,CAACK,WAAjB;AACH;AACJ,GANM,CAAP;AAOH;AAED,OAAO,eAAeC,cAAf,GAA4D;AAC/D,QAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAAF,CAA5B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AACA,MAAI,CAACV,QAAQ,CAACW,EAAd,EAAkB;AACd,UAAMC,OAAO,GAAI,qBAAoBZ,QAAQ,CAACa,UAAW,EAAzD;AACAC,IAAAA,MAAM,CAACC,KAAP,CAAaH,OAAb;AACA;AACH;;AAED,QAAMI,KAAK,GAAG,MAAMhB,QAAQ,CAACG,IAAT,EAApB;AACA,SAAOa,KAAP;AACH;AAAA;AAED,OAAO,eAAeC,eAAf,CAA+BC,QAA/B,EAAiD;AACpDV,EAAAA,cAAc,GAAGF,IAAjB,CAAuBU,KAAD,IAAW;AAC7B,QAAIA,KAAJ,EAAW;AACP,WAAK,MAAMG,IAAX,IAAmBH,KAAnB,EAA0B;AACtB,YAAIG,IAAI,CAACD,QAAL,KAAkBA,QAAtB,EAAgC;AAC5BT,UAAAA,OAAO,CAACC,GAAR,CAAa,WAAUS,IAAK,EAA5B;AACA,iBAAOA,IAAP;AACH,SAHD,MAGO;AACHV,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,iBAAO,OAAP;AACH;AACJ;AACJ;AACJ,GAZD;AAaA,SAAO,OAAP;AACH;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { IRootObject, Portfolio, Stock, userJSON } from \"./interfaces\";\n\nexport async function getStockJSON(ticker: string): Promise<IRootObject | string> {\n    // console.log(`fetching ${ticker} JSON `);\n    // const string = '{\"avgTotalVolume\":102907144,\"calculationPrice\":\"close\",\"change\":2.89,\"changePercent\":0.01678,\"close\":175.08,\"closeSource\":\"official\",\"closeTime\":1641934800998,\"companyName\":\"Apple Inc\",\"currency\":\"USD\",\"delayedPrice\":175.12,\"delayedPriceTime\":1641934794061,\"extendedChange\":0.16,\"extendedChangePercent\":0.00091,\"extendedPrice\":175.24,\"extendedPriceTime\":1641949197193,\"high\":175.18,\"highSource\":\"15 minute delayed price\",\"highTime\":1641934813503,\"iexAskPrice\":0,\"iexAskSize\":0,\"iexBidPrice\":0,\"iexBidSize\":0,\"iexClose\":174.93,\"iexCloseTime\":1641934798642,\"iexLastUpdated\":1641934798642,\"iexMarketPercent\":0.012563814998690337,\"iexOpen\":172.38,\"iexOpenTime\":1641911400308,\"iexRealtimePrice\":174.93,\"iexRealtimeSize\":100,\"iexVolume\":956582,\"lastTradeTime\":1641934799659,\"latestPrice\":175.08,\"latestSource\":\"Close\",\"latestTime\":\"January 11, 2022\",\"latestUpdate\":1641934800998,\"latestVolume\":76137861,\"low\":170.82,\"lowSource\":\"15 minute delayed price\",\"lowTime\":1641912928335,\"marketCap\":2859821674680,\"oddLotDelayedPrice\":175.01,\"oddLotDelayedPriceTime\":1641934795584,\"open\":172.19,\"openTime\":1641911402394,\"openSource\":\"official\",\"peRatio\":15.59,\"previousClose\":172.19,\"previousVolume\":106765552,\"primaryExchange\":\"NASDAQ\",\"symbol\":\"AAPL\",\"volume\":76137861,\"week52High\":182.94,\"week52Low\":115.67,\"ytdChange\":-0.01351791068311083,\"isUSMarketOpen\":false}'\n    // const stockJSON = JSON.parse(string)\n    // return stockJSON\n    try {\n        const response = await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n    ?token=Tpk_dec7b122df1e4bce8e1ebe0e6632fc06`)\n        const stockJSON = await response.json();\n        return stockJSON\n    } catch {\n        return `Tried to fetch ${ticker}, but the stock wasn't found ):`;\n    }\n}\n\nexport async function getStockLatestPrice(symbol: string): Promise<number> {\n    return getStockJSON(symbol).then((stockJSON => {\n        if (typeof stockJSON === 'string') {\n            return 0;\n        } else {\n            return stockJSON.latestPrice;\n        }\n    }));\n}\n\nexport async function getAllUserJSON(): Promise<userJSON[] | void> { \n    const response = await fetch(`http://localhost:5000/stocks/`);\n    console.log(\"trying to get all users\")\n    if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n    }\n\n    const users = await response.json();\n    return users\n};\n\nexport async function getThisUserJSON(username: string) { \n    getAllUserJSON().then((users) => {\n        if (users) {\n            for (const user of users) {\n                if (user.username === username) {\n                    console.log(`user is ${user}`)\n                    return user\n                } else {\n                    console.log(\"error here\")\n                    return \"ERROR\"\n                }\n            }\n        }\n    })\n    return \"Error\"\n};\n\n// returns a valid index if the stock exists in the portfolio, otherwise returns -1\n// export function getStockIndex(portfolio: Portfolio, stock: Stock | IRootObject ): any {\n//     const searchValue = stock.symbol\n//     const isStockSymbol = (stock: Stock) => {\n//         return stock.symbol === searchValue\n//     }\n//     const index = portfolio.stocks.findIndex(isStockSymbol)\n//     return index\n// }"]},"metadata":{},"sourceType":"module"}