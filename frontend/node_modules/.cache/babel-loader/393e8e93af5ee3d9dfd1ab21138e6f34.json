{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { getStockLatestPrice, useInterval } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockRow(props) {\n  _s();\n\n  const [latestPrice, setLatestPrice] = useState(0);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\");\n  useInterval(() => {\n    getStockLatestPrice(props.stock.symbol).then(newLatestPrice => {\n      setLatestPrice(newLatestPrice); // must use new price as setState hook is async\n\n      if (newLatestPrice > latestPrice) {\n        setLatestPriceFontColor(\"green\");\n      } else {\n        setLatestPriceFontColor(\"red\");\n      }\n    });\n  }, 5000); //initial price, runs once\n\n  useLayoutEffect(() => {\n    getStockLatestPrice(props.stock.symbol).then(newLatestPrice => {\n      setLatestPrice(newLatestPrice);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        color: latestPriceFontColor\n      },\n      children: latestPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.pricePurchased\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice * props.stock.quantity - props.stock.pricePurchased * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StockRow, \"iHw07RPI2J/p2EKiI5pdOmstIMg=\", false, function () {\n  return [useInterval];\n});\n\n_c = StockRow;\nexport default function StockList(props) {\n  // console.log(\"stocklist refreshing but why\")\n  // This method will map out the records on the table\n  const StocksToTable = stockList => {\n    return stockList.map(stock => /*#__PURE__*/_jsxDEV(StockRow, {\n      stock: stock //deleteStock={() => deleteStock(stock._id)}\n\n    }, stock.symbol, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this));\n  }; // This following section will display the table with the records of individuals.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Stock List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latest Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price Purchased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: StocksToTable(props.stocks)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 4\n  }, this);\n}\n_c2 = StockList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockRow\");\n$RefreshReg$(_c2, \"StockList\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx"],"names":["React","useLayoutEffect","useState","getStockLatestPrice","useInterval","StockRow","props","latestPrice","setLatestPrice","latestPriceFontColor","setLatestPriceFontColor","stock","symbol","then","newLatestPrice","color","quantity","pricePurchased","toFixed","StockList","StocksToTable","stockList","map","stocks"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { getStockLatestPrice, useInterval } from \"../helpers\";\nimport { IRootObject, Stock } from \"../interfaces\";\n\ninterface stockRowProps {\n  stock: Stock | IRootObject\n  //deleteStock: any\n  key: string\n}\n\nfunction StockRow(props: stockRowProps) {\n  const[latestPrice, setLatestPrice] = useState(0);\n  const[latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\")\n\n  useInterval(() => {\n    getStockLatestPrice(props.stock.symbol).then((newLatestPrice) => {\n      setLatestPrice(newLatestPrice)\n      // must use new price as setState hook is async\n      if (newLatestPrice > latestPrice) {\n        setLatestPriceFontColor(\"green\")\n      } else {\n        setLatestPriceFontColor(\"red\")\n      }\n    });\n  }, 5000);\n\n  //initial price, runs once\n  useLayoutEffect (() => {\n    getStockLatestPrice(props.stock.symbol).then((newLatestPrice) => {\n      setLatestPrice(newLatestPrice)\n    })\n  }, []); \n\n  return(\n    <tr>\n      <td>{props.stock.symbol}</td>\n      <td style={{color: latestPriceFontColor}}>{latestPrice}</td>\n      <td>{props.stock.quantity}</td>\n      <td>{props.stock.pricePurchased}</td>\n      <td>{+(latestPrice*props.stock.quantity).toFixed(2)}</td>\n      <td>{+(latestPrice*props.stock.quantity-props.stock.pricePurchased*props.stock.quantity).toFixed(2)}</td>\n    </tr>\n  )\n}\n \n\ninterface stockListProps {\n  stocks: Stock[] | IRootObject[]\n}\nexport default function StockList(props: stockListProps) {\n  // console.log(\"stocklist refreshing but why\")\n \n // This method will map out the records on the table\n const StocksToTable = (stockList: Stock[]) => {\n  return (\n    stockList.map((stock =>\n      <StockRow\n           stock={stock}\n           //deleteStock={() => deleteStock(stock._id)}\n           key={stock.symbol}\n         />\n    )))\n }\n \n // This following section will display the table with the records of individuals.\n return (\n   <div>\n     <h3>Stock List</h3>\n     <table>\n       <thead>\n         <tr>\n           <th>Symbol</th>\n           <th>Latest Price</th>\n           <th>Quantity</th>\n           <th>Price Purchased</th>\n           <th>Value</th>\n           <th>Net Value</th>\n         </tr>\n       </thead>\n       <tbody>{StocksToTable(props.stocks)}</tbody>\n     </table>\n   </div>\n );\n}"]},"metadata":{},"sourceType":"module"}