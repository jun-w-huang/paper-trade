{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { getStockIndex } from \"../../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BuyAndSellForm(props) {\n  _s();\n\n  const [quantity, setQuantity] = useState(100);\n  const [cost, setCost] = useState(0);\n  const [stockIsOwned, setStockIsOwned] = useState(false);\n  const index = getStockIndex(props.userJSON, props.stockJSON);\n  useLayoutEffect(() => {\n    var _ref;\n\n    console.log(\"use layout effect running\");\n    console.log(index);\n    index === -1 ? setStockIsOwned(false) : setStockIsOwned(true);\n    setCost((_ref = quantity * props.stockJSON.latestPrice) !== null && _ref !== void 0 ? _ref : \"0\");\n  }, [props.userJSON]);\n\n  const onChange = e => {\n    var _ref2;\n\n    console.log(\"on change\");\n    setQuantity(parseInt(e.target.value));\n    setCost((_ref2 = parseInt(e.target.value) * props.stockJSON.latestPrice) !== null && _ref2 !== void 0 ? _ref2 : 0);\n  };\n\n  async function onBuy(e) {\n    // e.preventDefault()\n    console.log(\"buy button pressed\");\n\n    if (cost > props.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: quantity,\n      pricePurchased: props.stockJSON.latestPrice\n    };\n\n    function combineTwoStocks(newStock, oldStock) {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    }\n\n    if (stockIsOwned) {\n      console.log(\"hello\");\n      const newCombinedStock = combineTwoStocks(newStock, props.userJSON.stocks[index]);\n      newStocks[index] = newCombinedStock;\n    } else {\n      newStocks.push(newStock);\n    }\n\n    const newCash = props.userJSON.portfolio.cash - cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash\n    };\n    const editedUser = {\n      portfolio: newPortfolio,\n      stocks: newStocks\n    };\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    props.handleBuy();\n  }\n\n  async function onSell(e) {\n    // e.preventDefault()\n    console.log(\"sell button clciked\");\n\n    if (quantity > props.userJSON.stocks[index].quantity) {\n      window.alert(\"You are trying to sell more stock than you own! Please lower the quantity\");\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n\n    if (quantity === props.userJSON.stocks[index].quantity) {\n      newStocks.splice(index, 1);\n    } else {\n      newStocks[index].quantity = newStocks[index].quantity - quantity;\n    }\n\n    const newCash = props.userJSON.portfolio.cash + cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash\n    };\n    const editedUser = {\n      portfolio: newPortfolio,\n      stocks: newStocks\n    };\n    console.log(newStocks);\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    props.handleBuy();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BuyForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"quantity\",\n        defaultValue: \"100\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        disabled: quantity ? false : true,\n        name: \"buyButton\",\n        value: \"Buy\",\n        onClick: e => onBuy(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        hidden: !stockIsOwned,\n        value: \"Sell\",\n        onClick: e => onSell(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cost / Revenue: \", cost.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BuyAndSellForm, \"0Ye3HZVdraaOhAmSx5BRpi13LpY=\");\n\n_c = BuyAndSellForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyAndSellForm\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx"],"names":["React","useLayoutEffect","useState","getStockIndex","BuyAndSellForm","props","quantity","setQuantity","cost","setCost","stockIsOwned","setStockIsOwned","index","userJSON","stockJSON","console","log","latestPrice","onChange","e","parseInt","target","value","onBuy","portfolio","cash","window","alert","newStocks","stocks","slice","newStock","symbol","pricePurchased","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","newCombinedStock","push","newCash","newPortfolio","name","editedUser","fetch","_id","method","body","JSON","stringify","headers","handleBuy","onSell","splice"],"mappings":"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","sourcesContent":["import React, {\n  ReactElement,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { getStockIndex } from \"../../helpers\";\nimport { IRootObject, Portfolio, Stock, userJSON } from \"../../interfaces\";\n\ninterface BuyAndSellFormProps {\n  userJSON: userJSON;\n  stockJSON: IRootObject;\n  handleBuy: () => void;\n}\n\nexport default function BuyAndSellForm(props: BuyAndSellFormProps) {\n  const [quantity, setQuantity] = useState(100);\n\n  const [cost, setCost] = useState(0);\n  const [stockIsOwned, setStockIsOwned] = useState(false);\n  const index = getStockIndex(props.userJSON, props.stockJSON);\n\n  useLayoutEffect(() => {\n    console.log(\"use layout effect running\");\n    console.log(index);\n    index === -1 ? setStockIsOwned(false) : setStockIsOwned(true);\n    setCost(quantity * props.stockJSON.latestPrice ?? \"0\");\n  }, [props.userJSON]);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"on change\");\n    setQuantity(parseInt(e.target.value));\n    setCost(parseInt(e.target.value) * props.stockJSON.latestPrice ?? 0);\n  };\n\n  async function onBuy(e: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n    // e.preventDefault()\n    console.log(\"buy button pressed\");\n\n    if (cost > props.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: quantity,\n      pricePurchased: props.stockJSON.latestPrice,\n    };\n\n    function combineTwoStocks(newStock: Stock, oldStock: Stock) {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased =\n        (newStock.quantity * newStock.pricePurchased +\n          oldStock.quantity * oldStock.pricePurchased) /\n        newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    }\n\n    if (stockIsOwned) {\n      console.log(\"hello\");\n      const newCombinedStock = combineTwoStocks(\n        newStock,\n        props.userJSON.stocks[index]\n      );\n      newStocks[index] = newCombinedStock;\n    } else {\n      newStocks.push(newStock);\n    }\n\n    const newCash = props.userJSON.portfolio.cash - cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash,\n    };\n\n    const editedUser = {\n      portfolio: newPortfolio,\n      stocks: newStocks,\n    };\n\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    props.handleBuy();\n  }\n\n  async function onSell(e: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n    // e.preventDefault()\n    console.log(\"sell button clciked\");\n\n    if (quantity > props.userJSON.stocks[index].quantity) {\n      window.alert(\n        \"You are trying to sell more stock than you own! Please lower the quantity\"\n      );\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n\n    if (quantity === props.userJSON.stocks[index].quantity) {\n      newStocks.splice(index, 1);\n    } else {\n      newStocks[index].quantity = newStocks[index].quantity - quantity;\n    }\n\n    const newCash = props.userJSON.portfolio.cash + cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash,\n    };\n\n    const editedUser = {\n      portfolio: newPortfolio,\n      stocks: newStocks,\n    };\n\n    console.log(newStocks);\n\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    props.handleBuy();\n  }\n\n  return (\n    <div id=\"BuyForm\">\n      <form>\n        <label htmlFor=\"quantity\">Quantity: </label>\n        <input\n          type=\"text\"\n          id=\"quantity\"\n          defaultValue=\"100\"\n          onChange={onChange}\n        />\n        <input\n          type=\"button\"\n          disabled={quantity ? false : true}\n          name=\"buyButton\"\n          value=\"Buy\"\n          onClick={(e) => onBuy(e)}\n        />\n        <input\n          type=\"button\"\n          hidden={!stockIsOwned}\n          value=\"Sell\"\n          onClick={(e) => onSell(e)}\n        />\n      </form>\n      <p>Cost / Revenue: {cost.toFixed(2)}</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}