{"ast":null,"code":"export async function fetchStockJSON(ticker) {\n  try {\n    const response = await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const stockJSON = await response.json();\n    return Promise.resolve(stockJSON);\n  } catch {\n    return Promise.reject(`Tried to fetch ${ticker}, but the stock was not found.`);\n  }\n}\nexport async function fetchStockLatestPrice(symbol) {\n  return fetchStockJSON(symbol).then(stockJSON => {\n    if (typeof stockJSON === \"string\") {\n      return 0;\n    } else {\n      return stockJSON.latestPrice;\n    }\n  });\n}\nexport async function getThisUserJSON(token) {\n  const response = await fetch(`http://localhost:5000/auth/user`, {\n    method: \"GET\",\n    headers: {\n      \"x-auth-token\": token\n    }\n  });\n\n  if (response) {\n    const userJSON = await response.json();\n    return userJSON;\n  }\n}\nexport async function updateUserInBackend(userID, editedUserPortfolio, editedUserStocks, token) {\n  const editedUser = {\n    portfolio: editedUserPortfolio,\n    stocks: editedUserStocks\n  };\n  return fetch(`http://localhost:5000/update/${userID}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedUser),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-auth-token\": token\n    }\n  });\n} // returns a valid index if the stock exists in the portfolio, otherwise returns -1\n\nexport function getStockIndex(userJSON, stock) {\n  const searchValue = stock.symbol;\n\n  const isStockSymbol = stock => {\n    return stock.symbol === searchValue;\n  };\n\n  const index = userJSON.stocks.findIndex(isStockSymbol);\n  return index;\n} // https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n// dan abramov set interval typescript version\n// export type IntervalFunction = () => unknown | void;\n// export function useInterval(callback: IntervalFunction, delay: number) {\n//   const savedCallback = useRef<IntervalFunction | null>(null);\n//   // Remember the latest callback.\n//   useEffect(() => {\n//     savedCallback.current = callback;\n//   });\n//   // Set up the interval.\n//   useEffect(() => {\n//     function tick() {\n//       if (savedCallback.current !== null) {\n//         savedCallback.current();\n//       }\n//     }\n//     const id = setInterval(tick, delay);\n//     return () => clearInterval(id);\n//   }, [delay]);\n// }","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/dashboard/helpers.tsx"],"names":["fetchStockJSON","ticker","response","fetch","stockJSON","json","Promise","resolve","reject","fetchStockLatestPrice","symbol","then","latestPrice","getThisUserJSON","token","method","headers","userJSON","updateUserInBackend","userID","editedUserPortfolio","editedUserStocks","editedUser","portfolio","stocks","body","JSON","stringify","getStockIndex","stock","searchValue","isStockSymbol","index","findIndex"],"mappings":"AAGA,OAAO,eAAeA,cAAf,CAA8BC,MAA9B,EAA4D;AACjE,MAAI;AACF,UAAMC,QAAQ,GACZ,MAAMC,KAAK,CAAE,4CAA2CF,MAAO;AACrE,oFADiB,CADb;AAGA,UAAMG,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBH,SAAhB,CAAP;AACD,GAND,CAME,MAAM;AACN,WAAOE,OAAO,CAACE,MAAR,CACJ,kBAAiBP,MAAO,gCADpB,CAAP;AAGD;AACF;AAED,OAAO,eAAeQ,qBAAf,CAAqCC,MAArC,EAAsE;AAC3E,SAAOV,cAAc,CAACU,MAAD,CAAd,CAAuBC,IAAvB,CAA6BP,SAAD,IAAe;AAChD,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,SAAS,CAACQ,WAAjB;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,eAAf,CAA+BC,KAA/B,EAA8C;AACnD,QAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAF,EAAoC;AAC9DY,IAAAA,MAAM,EAAE,KADsD;AAE9DC,IAAAA,OAAO,EAAE;AACP,sBAAgBF;AADT;AAFqD,GAApC,CAA5B;;AAMA,MAAIZ,QAAJ,EAAc;AACZ,UAAMe,QAAQ,GAAG,MAAMf,QAAQ,CAACG,IAAT,EAAvB;AACA,WAAOY,QAAP;AACD;AACF;AAED,OAAO,eAAeC,mBAAf,CACLC,MADK,EAELC,mBAFK,EAGLC,gBAHK,EAILP,KAJK,EAKS;AACd,QAAMQ,UAAU,GAAG;AACjBC,IAAAA,SAAS,EAAEH,mBADM;AAEjBI,IAAAA,MAAM,EAAEH;AAFS,GAAnB;AAKA,SAAOlB,KAAK,CAAE,gCAA+BgB,MAAO,EAAxC,EAA2C;AACrDJ,IAAAA,MAAM,EAAE,MAD6C;AAErDU,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAF+C;AAGrDN,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,sBAAgBF;AAFT;AAH4C,GAA3C,CAAZ;AAQD,C,CAED;;AACA,OAAO,SAASc,aAAT,CACLX,QADK,EAELY,KAFK,EAGG;AACR,QAAMC,WAAW,GAAGD,KAAK,CAACnB,MAA1B;;AACA,QAAMqB,aAAa,GAAIF,KAAD,IAAkB;AACtC,WAAOA,KAAK,CAACnB,MAAN,KAAiBoB,WAAxB;AACD,GAFD;;AAGA,QAAME,KAAK,GAAGf,QAAQ,CAACO,MAAT,CAAgBS,SAAhB,CAA0BF,aAA1B,CAAd;AACA,SAAOC,KAAP;AACD,C,CAED;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { IRootObject, Portfolio, Stock, userJSON } from \"./interfaces\";\n\nexport async function fetchStockJSON(ticker: string): Promise<any> {\n  try {\n    const response =\n      await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const stockJSON = await response.json();\n    return Promise.resolve(stockJSON);\n  } catch {\n    return Promise.reject(\n      `Tried to fetch ${ticker}, but the stock was not found.`\n    );\n  }\n}\n\nexport async function fetchStockLatestPrice(symbol: string): Promise<number> {\n  return fetchStockJSON(symbol).then((stockJSON) => {\n    if (typeof stockJSON === \"string\") {\n      return 0;\n    } else {\n      return stockJSON.latestPrice;\n    }\n  });\n}\n\nexport async function getThisUserJSON(token: string) {\n  const response = await fetch(`http://localhost:5000/auth/user`, {\n    method: \"GET\",\n    headers: {\n      \"x-auth-token\": token,\n    },\n  });\n  if (response) {\n    const userJSON = await response.json();\n    return userJSON;\n  }\n}\n\nexport async function updateUserInBackend(\n  userID: { $oid: string },\n  editedUserPortfolio: Portfolio,\n  editedUserStocks: Stock[],\n  token: string\n): Promise<any> {\n  const editedUser = {\n    portfolio: editedUserPortfolio,\n    stocks: editedUserStocks,\n  };\n\n  return fetch(`http://localhost:5000/update/${userID}`, {\n    method: \"POST\",\n    body: JSON.stringify(editedUser),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-auth-token\": token,\n    },\n  });\n}\n\n// returns a valid index if the stock exists in the portfolio, otherwise returns -1\nexport function getStockIndex(\n  userJSON: userJSON,\n  stock: Stock | IRootObject\n): number {\n  const searchValue = stock.symbol;\n  const isStockSymbol = (stock: Stock) => {\n    return stock.symbol === searchValue;\n  };\n  const index = userJSON.stocks.findIndex(isStockSymbol);\n  return index;\n}\n\n// https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n// dan abramov set interval typescript version\n// export type IntervalFunction = () => unknown | void;\n\n// export function useInterval(callback: IntervalFunction, delay: number) {\n//   const savedCallback = useRef<IntervalFunction | null>(null);\n\n//   // Remember the latest callback.\n//   useEffect(() => {\n//     savedCallback.current = callback;\n//   });\n\n//   // Set up the interval.\n//   useEffect(() => {\n//     function tick() {\n//       if (savedCallback.current !== null) {\n//         savedCallback.current();\n//       }\n//     }\n//     const id = setInterval(tick, delay);\n//     return () => clearInterval(id);\n//   }, [delay]);\n// }\n"]},"metadata":{},"sourceType":"module"}