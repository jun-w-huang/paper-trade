{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx\";\nimport React from 'react';\nimport \"./PaperTrade.css\";\nimport SearchForm from './components/forms/SearchForm';\nimport PortfolioDetails from './PortfolioDetails';\nimport { Routes } from \"react-router-dom\";\nimport { getThisUserJSON } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultPortfolio = {\n  name: \"Tech Stocks\",\n  cash: 1000000 // stocks: [{\n  //     symbol: \"AAPL\",\n  //     latestPrice: 132.32,\n  //     quantity: 200,\n  //     pricePurchased: 110.23,\n  // },\n  // {\n  //     symbol: \"AMZN\",\n  //     latestPrice: 3456.32,\n  //     quantity: 100,\n  //     pricePurchased: 2342.32,\n  // }]\n\n};\n\nclass PaperTrade extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      portfolio: this.props.userJSON.portfolio,\n      userJSON: this.props.userJSON,\n      stocks: this.props.userJSON.stocks,\n      JSONOrString: \"\",\n      stockJSON: undefined\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"papertrade mounted\"); // this.getStocks()\n\n    getThisUserJSON(\"huang7178\").then(user => {\n      if (typeof user === 'object') {\n        console.log(`component gets user as ${user}`);\n        console.log(`user's username is ${user.username}`);\n      }\n    }); // this.getUsername()\n  }\n\n  // This method fetches the stocks from the database.\n  async getStocks() {\n    const response = await fetch(`http://localhost:5000/stocks/`);\n    console.log(\"updating stocks\");\n\n    if (!response.ok) {\n      const message = `An error occured: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const stocks = await response.json();\n    this.setState({\n      stocks: stocks\n    });\n  }\n\n  handleSearch(JSONOrString) {\n    if (typeof JSONOrString === 'string') {\n      this.setState({\n        JSONOrString: JSONOrString,\n        stockJSON: undefined\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString,\n        stockJSON: JSONOrString\n      });\n    }\n  }\n\n  async handleBuy(cost, quantity, stockJSON) {\n    const portfolio = this.state.portfolio;\n    const newStock = {\n      symbol: stockJSON.symbol,\n      latestPrice: stockJSON.latestPrice,\n      quantity: quantity,\n      pricePurchased: stockJSON.latestPrice\n    };\n    console.log(newStock); // check database if the stock is in the database\n\n    const stockInDatabase = symbol => {\n      if (symbol in this.state.stocks) {\n        return true;\n      } else {\n        return false;\n      }\n    }; // const combineTwoStocks = (newStock: Stock, oldStock: Stock) => {\n    //     // quantity will be the sum of both,\n    //     // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n    //     // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n    //     // 1*10 = 10, 2*20 = 40, 50/3\n    //     const newTotalQuantity = newStock.quantity + oldStock.quantity;\n    //     const newAveragePricePurchased = \n    //         (newStock.quantity * newStock.pricePurchased\n    //         + oldStock.quantity * oldStock.pricePurchased)\n    //         / (newTotalQuantity);\n    //     newStock.quantity = newTotalQuantity;\n    //     newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n    //     return newStock\n    // }\n    // check sufficient cash\n\n\n    if (portfolio.cash > cost) {\n      portfolio.cash = portfolio.cash - cost;\n      await fetch(\"http://localhost:5000/stocks/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newStock)\n      }).then(foo => {\n        this.getStocks();\n      }).catch(error => {\n        window.alert(error);\n        return;\n      });\n    }\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this); // this.getStocks()\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"http://localhost:3000/\",\n          children: \"Paper Trade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n          portfolio: this.state.portfolio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"forms\",\n        children: /*#__PURE__*/_jsxDEV(SearchForm, {\n          portfolio: this.state.portfolio,\n          JSONOrString: this.state.JSONOrString,\n          handleSearch: this.handleSearch,\n          handleBuy: this.handleBuy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PaperTrade;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx"],"names":["React","SearchForm","PortfolioDetails","Routes","getThisUserJSON","defaultPortfolio","name","cash","PaperTrade","Component","state","portfolio","props","userJSON","stocks","JSONOrString","stockJSON","undefined","componentDidMount","console","log","then","user","username","getStocks","response","fetch","ok","message","statusText","window","alert","json","setState","handleSearch","handleBuy","cost","quantity","newStock","symbol","latestPrice","pricePurchased","stockInDatabase","method","headers","body","JSON","stringify","foo","catch","error","render","bind"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { IRootObject, Portfolio, Stock, userJSON } from './interfaces';\nimport \"./PaperTrade.css\"\n\nimport SearchForm from './components/forms/SearchForm';\nimport PortfolioDetails from './PortfolioDetails';\nimport PortfolioTable from './PortfolioTable';\n\nimport { Route, Routes } from \"react-router-dom\";\n\nimport Edit from \"./components/edit\";\nimport Create from \"./components/create\";\nimport StockList from './components/stockList';\nimport { getThisUserJSON } from './helpers';\n\n\nconst defaultPortfolio =  {\n    name: \"Tech Stocks\",\n    cash: 1000000,\n    // stocks: [{\n    //     symbol: \"AAPL\",\n    //     latestPrice: 132.32,\n    //     quantity: 200,\n    //     pricePurchased: 110.23,\n    // },\n    // {\n    //     symbol: \"AMZN\",\n    //     latestPrice: 3456.32,\n    //     quantity: 100,\n    //     pricePurchased: 2342.32,\n    // }]\n}\n\ntype PaperTradeProps = {\n    userJSON: userJSON\n}\ntype PaperTradeState = {\n    portfolio: Portfolio\n    userJSON: userJSON\n    stocks: Stock[]\n    JSONOrString: IRootObject | string\n    stockJSON?: IRootObject\n}\n\nclass PaperTrade extends React.Component<PaperTradeProps, PaperTradeState> {\n    state={\n        portfolio: this.props.userJSON.portfolio,\n        userJSON: this.props.userJSON,\n        stocks: this.props.userJSON.stocks,\n        JSONOrString: \"\",\n        stockJSON: undefined,\n    }\n\n    componentDidMount() {\n        console.log(\"papertrade mounted\")\n        // this.getStocks()\n        getThisUserJSON(\"huang7178\").then((user) => {\n            if (typeof user === 'object') {\n                console.log(`component gets user as ${user}`)\n                console.log(`user's username is ${user.username}`)\n            }\n        })\n        // this.getUsername()\n    };\n \n    // This method fetches the stocks from the database.\n    async getStocks() { \n        const response = await fetch(`http://localhost:5000/stocks/`);\n        console.log(\"updating stocks\")\n        if (!response.ok) {\n            const message = `An error occured: ${response.statusText}`;\n            window.alert(message);\n            return;\n        }\n\n        const stocks = await response.json();\n        this.setState({\n            stocks: stocks,\n        });\n    };\n    \n\n    handleSearch(JSONOrString: IRootObject | string) {\n        if (typeof JSONOrString === 'string') {\n            this.setState({\n                JSONOrString: JSONOrString,\n                stockJSON: undefined,\n            })\n        } else {\n            this.setState({\n                JSONOrString: JSONOrString,\n                stockJSON: JSONOrString\n            });\n        }\n    }\n\n    async handleBuy(cost: number, quantity: number, stockJSON: IRootObject) {\n        const portfolio = this.state.portfolio\n\n        const newStock = {\n            symbol: stockJSON.symbol,\n            latestPrice: stockJSON.latestPrice,\n            quantity: quantity,\n            pricePurchased: stockJSON.latestPrice,\n        }\n\n        console.log(newStock)\n        \n\n        // check database if the stock is in the database\n\n        const stockInDatabase = (symbol: string) => {\n            if (symbol in this.state.stocks) {\n                return true\n            } else {\n                return false\n            }\n        }\n        // const combineTwoStocks = (newStock: Stock, oldStock: Stock) => {\n        //     // quantity will be the sum of both,\n        //     // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n        //     // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n        //     // 1*10 = 10, 2*20 = 40, 50/3\n        //     const newTotalQuantity = newStock.quantity + oldStock.quantity;\n        //     const newAveragePricePurchased = \n        //         (newStock.quantity * newStock.pricePurchased\n        //         + oldStock.quantity * oldStock.pricePurchased)\n        //         / (newTotalQuantity);\n        //     newStock.quantity = newTotalQuantity;\n        //     newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n        //     return newStock\n        // }\n\n        // check sufficient cash\n        if (portfolio.cash > cost) {\n            portfolio.cash = portfolio.cash - cost;\n            await fetch(\"http://localhost:5000/stocks/add\", {\n                method: \"POST\",\n                headers: {\n                \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(newStock),\n            })\n            .then(foo => {\n                this.getStocks()\n            })\n            .catch(error => {\n                window.alert(error);\n                return;\n            });\n            \n        }\n    }\n\n    render() {\n        this.handleSearch = this.handleSearch.bind(this)\n        this.handleBuy = this.handleBuy.bind(this)\n        // this.getStocks()\n\n        return(\n            <div className=\"container\">\n                <div id=\"logo\">\n                    <a href=\"http://localhost:3000/\">\n                        Paper Trade\n                    </a>\n                </div>\n                <div>\n                    <PortfolioDetails portfolio={this.state.portfolio}/>\n                </div>\n                <div id=\"forms\">\n                    <SearchForm \n                        portfolio={this.state.portfolio}\n                        JSONOrString={this.state.JSONOrString} \n                        handleSearch={this.handleSearch}\n                        handleBuy={this.handleBuy}/>\n                </div>\n                <Routes>\n                    {/* <Navbar />\n                    <Route path=\"/edit/:id\" element={<Edit />} />\n                        <Route path=\"/create\" element={<Create />} /> */}\n                    {/* <Route path=\"/\" element={<StockList stocks={this.state.stocks}/>} /> */}\n                </Routes>\n                {/* {this.state.portfolio && <PortfolioTable portfolio={this.state.portfolio}/>} */}\n            </div>\n        )\n    }\n}\n\nexport default PaperTrade;\n"]},"metadata":{},"sourceType":"module"}