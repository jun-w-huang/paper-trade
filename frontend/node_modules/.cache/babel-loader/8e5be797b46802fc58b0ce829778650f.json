{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { getStockIndex } from \"../../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BuyAndSellForm(props) {\n  _s();\n\n  const [quantity, setQuantity] = useState(100);\n  const [cost, setCost] = useState(0);\n  const [stockIsOwned, setStockIsOwned] = useState(false);\n  const index = getStockIndex(props.userJSON, props.stockJSON);\n  useLayoutEffect(() => {\n    var _ref;\n\n    console.log(\"use layout effect running\");\n    index === -1 ? setStockIsOwned(false) : setStockIsOwned(true);\n    setCost((_ref = quantity * props.stockJSON.latestPrice) !== null && _ref !== void 0 ? _ref : \"0\");\n  }, [props.stockJSON]);\n\n  const onChange = e => {\n    var _ref2;\n\n    console.log(\"on change\");\n    setQuantity(parseInt(e.target.value));\n    setCost((_ref2 = parseInt(e.target.value) * props.stockJSON.latestPrice) !== null && _ref2 !== void 0 ? _ref2 : 0);\n  };\n\n  async function onBuy(e) {\n    e.preventDefault();\n    console.log(\"buy button pressed\");\n\n    if (cost > props.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: quantity,\n      pricePurchased: props.stockJSON.latestPrice\n    };\n\n    const combineTwoStocks = (newStock, oldStock) => {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    };\n\n    if (stockIsOwned) {\n      console.log(stockIsOwned);\n      const newCombinedStock = combineTwoStocks(newStock, props.userJSON.stocks[index]);\n      newStocks[index] = newCombinedStock;\n    } else {\n      newStocks.push(newStock);\n    }\n\n    const newCash = props.userJSON.portfolio.cash - cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash\n    };\n    const editedUser = {\n      \"portfolio\": newPortfolio,\n      \"stocks\": newStocks\n    };\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  async function onSell(e) {\n    e.preventDefault();\n    console.log(\"sell button clciked\");\n\n    if (quantity > props.userJSON.stocks[index].quantity) {\n      window.alert(\"You are trying to sell more stock than you own! Please lower the quantity\");\n      return;\n    }\n\n    const newStocks = props.userJSON.stocks.slice();\n\n    if (quantity === props.userJSON.stocks[index].quantity) {\n      newStocks.splice(index, 1);\n    } else {\n      newStocks[index].quantity = newStocks[index].quantity - quantity;\n    }\n\n    const newCash = props.userJSON.portfolio.cash + cost;\n    const newPortfolio = {\n      name: props.userJSON.portfolio.name,\n      cash: newCash\n    };\n    const editedUser = {\n      \"portfolio\": newPortfolio,\n      \"stocks\": newStocks\n    };\n    console.log(newStocks);\n    await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BuyForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"quantity\",\n        defaultValue: \"100\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        disabled: quantity ? false : true,\n        name: \"buyButton\",\n        value: \"Buy\",\n        onClick: e => onBuy(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        hidden: !stockIsOwned,\n        value: \"Sell\",\n        onClick: e => onSell(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cost / Revenue: \", cost.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BuyAndSellForm, \"0Ye3HZVdraaOhAmSx5BRpi13LpY=\");\n\n_c = BuyAndSellForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyAndSellForm\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx"],"names":["React","useLayoutEffect","useState","getStockIndex","BuyAndSellForm","props","quantity","setQuantity","cost","setCost","stockIsOwned","setStockIsOwned","index","userJSON","stockJSON","console","log","latestPrice","onChange","e","parseInt","target","value","onBuy","preventDefault","portfolio","cash","window","alert","newStocks","stocks","slice","newStock","symbol","pricePurchased","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","newCombinedStock","push","newCash","newPortfolio","name","editedUser","fetch","_id","method","body","JSON","stringify","headers","onSell","splice"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { getStockIndex } from \"../../helpers\";\nimport { IRootObject, Portfolio, Stock, userJSON } from \"../../interfaces\";\n\ninterface BuyAndSellFormProps {\n    userJSON: userJSON\n    stockJSON : IRootObject\n}\n\n\nexport default function BuyAndSellForm(props: BuyAndSellFormProps){\n    const [quantity, setQuantity] = useState(100)\n\n    const [cost, setCost] = useState(0);\n    const [stockIsOwned, setStockIsOwned] = useState(false)\n    const index = getStockIndex(props.userJSON, props.stockJSON)\n\n    useLayoutEffect(() => {\n        console.log(\"use layout effect running\");\n        (index === -1) ? setStockIsOwned(false) : setStockIsOwned(true);\n        setCost((quantity*props.stockJSON.latestPrice) ?? \"0\");\n    }, [props.stockJSON])\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(\"on change\")\n        setQuantity(parseInt(e.target.value))\n        setCost((parseInt(e.target.value)*props.stockJSON.latestPrice) ?? 0)\n    };\n\n    async function onBuy(e: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n        e.preventDefault()\n        console.log(\"buy button pressed\")\n\n        if (cost > props.userJSON.portfolio.cash) {\n            window.alert(\"You don't have enough cash to buy this stock!\")\n            return;\n        }\n\n        const newStocks = props.userJSON.stocks.slice()\n\n        const newStock = {\n            symbol: props.stockJSON.symbol,\n            quantity: quantity,\n            pricePurchased: props.stockJSON.latestPrice,\n        }\n\n        const combineTwoStocks = (newStock: Stock, oldStock: Stock) => {\n            // quantity will be the sum of both,\n            // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n            // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n            // 1*10 = 10, 2*20 = 40, 50/3\n            const newTotalQuantity = newStock.quantity + oldStock.quantity;\n            const newAveragePricePurchased = \n                (newStock.quantity * newStock.pricePurchased\n                + oldStock.quantity * oldStock.pricePurchased)\n                / (newTotalQuantity);\n            newStock.quantity = newTotalQuantity;\n            newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n            return newStock\n        }\n\n        \n        if (stockIsOwned) {\n            console.log(stockIsOwned)\n            const newCombinedStock = combineTwoStocks(newStock, props.userJSON.stocks[index])\n            newStocks[index] = newCombinedStock\n        } else {\n            newStocks.push(newStock)\n        }\n\n        const newCash = props.userJSON.portfolio.cash - cost;\n        const newPortfolio = {\n            name: props.userJSON.portfolio.name,\n            cash: newCash,\n        }\n\n        const editedUser = {\n            \"portfolio\": newPortfolio,\n            \"stocks\": newStocks\n        };\n\n\n        await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n            'Content-Type': 'application/json'\n            },\n        });\n    }\n\n    async function onSell(e: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n        e.preventDefault()\n        console.log(\"sell button clciked\")\n\n        if (quantity > props.userJSON.stocks[index].quantity) {\n            window.alert(\"You are trying to sell more stock than you own! Please lower the quantity\")\n            return;\n        }\n\n        const newStocks = props.userJSON.stocks.slice()\n\n        if (quantity === props.userJSON.stocks[index].quantity) {\n            newStocks.splice(index, 1)\n        } else {\n            newStocks[index].quantity = newStocks[index].quantity - quantity\n        }\n\n        const newCash = props.userJSON.portfolio.cash + cost;\n        const newPortfolio = {\n            name: props.userJSON.portfolio.name,\n            cash: newCash,\n        }\n\n        const editedUser = {\n            \"portfolio\": newPortfolio,\n            \"stocks\": newStocks\n        };\n\n        console.log(newStocks)\n\n        await fetch(`http://localhost:5000/update/${props.userJSON._id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n            'Content-Type': 'application/json'\n            },\n        });\n    }\n\n    return(\n        <div id=\"BuyForm\">\n            <form>\n                <label htmlFor=\"quantity\">Quantity: </label>\n                <input type=\"text\" id=\"quantity\" defaultValue=\"100\" onChange={onChange}/>\n                <input type=\"button\" disabled={quantity ? false : true} name=\"buyButton\" value=\"Buy\" onClick={(e) => onBuy(e)}/>\n                <input type=\"button\" hidden={!stockIsOwned} value=\"Sell\" onClick={(e) => onSell(e)}/>\n            </form>\n            <p>Cost / Revenue: {cost.toFixed(2)}</p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}