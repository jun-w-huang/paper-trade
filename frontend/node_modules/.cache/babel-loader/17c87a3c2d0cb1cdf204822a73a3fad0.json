{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/dashboard/Dashboard.tsx\";\nimport React from \"react\";\nimport \"../styles/Dashboard.css\";\nimport PortfolioDetails from \"./PortfolioDetails\";\nimport SearchForm from \"./SearchForm\";\nimport OwnedStockList from \"./OwnedStocksList\";\nimport Header from \"./Header\";\nimport { getStockIndex, getStockLatestPrice, getThisUserJSON, updateUser } from \"./helpers\";\nimport TopTenStocksList from \"./TopTenStocksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.initialState = {\n      token: this.props.token,\n      userJSON: {\n        _id: {\n          $oid: \"\"\n        },\n        username: \"\",\n        password: \"\",\n        portfolio: {\n          name: \"\",\n          cash: 0\n        },\n        stocks: []\n      },\n      JSONOrString: \"\"\n    };\n    this.state = this.initialState;\n\n    this.handleBuy = async props => {\n      return this.refreshUserJSON().then(() => {\n        if (props.cost > this.state.userJSON.portfolio.cash) {\n          return Promise.reject(\"You don't have enough cash to buy this stock!\");\n        }\n\n        const newStocks = this.state.userJSON.stocks.slice();\n        const newStock = {\n          symbol: props.stockJSON.symbol,\n          quantity: props.quantity,\n          pricePurchased: props.stockJSON.latestPrice,\n          latestPrice: props.stockJSON.latestPrice\n        };\n\n        function combineTwoStocks(newStock, oldStock) {\n          // quantity will be the sum of both,\n          // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n          // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n          // 1*10 = 10, 2*20 = 40, 50/3\n          const newTotalQuantity = newStock.quantity + oldStock.quantity;\n          const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n          newStock.quantity = newTotalQuantity;\n          newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n          return newStock;\n        }\n\n        const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n        if (index !== -1) {\n          // if the user already owns the stock then combine them into one stock element\n          const newCombinedStock = combineTwoStocks(newStock, this.state.userJSON.stocks[index]);\n          newStocks[index] = newCombinedStock;\n        } else {\n          // otherwise just add a new stock to the array\n          newStocks.push(newStock);\n        }\n\n        const newCash = this.state.userJSON.portfolio.cash - props.cost;\n        const newPortfolio = {\n          name: this.state.userJSON.portfolio.name,\n          cash: newCash\n        };\n        updateUser(this.state.userJSON._id, newPortfolio, newStocks, this.state.token).then(() => {\n          return this.refreshUserJSON();\n        });\n      });\n    };\n\n    this.handleSell = async props => {\n      const index = getStockIndex(this.state.userJSON, props.stockJSON);\n      return this.refreshUserJSON().then(() => {\n        const newStocks = this.state.userJSON.stocks.slice();\n\n        if (props.quantity > newStocks[index].quantity) {\n          window.alert(\"You are trying to sell more stock than you own! Please lower the quantity\");\n          return Promise.reject();\n        }\n\n        if (props.quantity === newStocks[index].quantity) {\n          // if quantity is all of the existing stock's quantity, then remove the stock from the\n          // user's stocks\n          newStocks.splice(index, 1);\n        } else {\n          // otherwise, just subtract the sold quantity from the existing quantity\n          newStocks[index].quantity = newStocks[index].quantity - props.quantity;\n        }\n\n        const newCash = this.state.userJSON.portfolio.cash + props.cost;\n        const newPortfolio = {\n          name: this.state.userJSON.portfolio.name,\n          cash: newCash\n        };\n        updateUser(this.state.userJSON._id, newPortfolio, newStocks, this.state.token).then(() => {\n          return this.refreshUserJSON();\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.refreshUserJSON();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // check userJSON and if their stocks have changed then update userJSON state.\n    console.log(\"updating component\");\n    getThisUserJSON(this.props.token).then(userJSON => {\n      var _prevState$userJSON;\n\n      if ( // checks if stocks owned have changed.\n      typeof prevState.userJSON !== \"undefined\" && userJSON.stocks !== ((_prevState$userJSON = prevState.userJSON) === null || _prevState$userJSON === void 0 ? void 0 : _prevState$userJSON.stocks) && prevState.userJSON.stocks[0] && prevState.userJSON.stocks[0].symbol !== userJSON.stocks[0].symbol) {\n        this.setState({\n          userJSON: userJSON\n        });\n      }\n    });\n  }\n\n  async refreshUserJSON() {\n    const userJSON = await getThisUserJSON(this.props.token);\n\n    if (userJSON) {\n      for (let i = 0; i < userJSON.stocks.length; i++) {\n        let stock = userJSON.stocks[i];\n        stock.latestPrice = await getStockLatestPrice(stock.symbol);\n      }\n\n      this.setState({\n        userJSON: userJSON\n      });\n      return Promise.resolve();\n    }\n\n    return Promise.reject();\n  }\n\n  render() {\n    this.handleBuy = this.handleBuy.bind(this);\n    this.handleSell = this.handleSell.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n        stocks: this.state.userJSON.stocks,\n        portfolio: this.state.userJSON.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OwnedStockList, {\n        stocks: this.state.userJSON.stocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        token: this.state.token,\n        handleBuy: this.handleBuy,\n        handleSell: this.handleSell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopTenStocksList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/dashboard/Dashboard.tsx"],"names":["React","PortfolioDetails","SearchForm","OwnedStockList","Header","getStockIndex","getStockLatestPrice","getThisUserJSON","updateUser","TopTenStocksList","Dashboard","Component","initialState","token","props","userJSON","_id","$oid","username","password","portfolio","name","cash","stocks","JSONOrString","state","handleBuy","refreshUserJSON","then","cost","Promise","reject","newStocks","slice","newStock","symbol","stockJSON","quantity","pricePurchased","latestPrice","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","index","newCombinedStock","push","newCash","newPortfolio","handleSell","window","alert","splice","componentDidMount","componentDidUpdate","prevProps","prevState","console","log","setState","i","length","stock","resolve","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { handleTradeProps, IRootObject, Stock, userJSON } from \"./interfaces\";\nimport \"../styles/Dashboard.css\";\n\nimport PortfolioDetails from \"./PortfolioDetails\";\nimport SearchForm from \"./SearchForm\";\nimport OwnedStockList from \"./OwnedStocksList\";\nimport Header from \"./Header\";\n\nimport {\n  getStockIndex,\n  getStockLatestPrice,\n  getThisUserJSON,\n  updateUser,\n} from \"./helpers\";\nimport TopTenStocksList from \"./TopTenStocksList\";\n\ntype DashboardProps = {\n  token: string;\n};\ntype DashboardState = {\n  token: string;\n  userJSON?: userJSON;\n  JSONOrString: IRootObject | string;\n};\n\nclass Dashboard extends React.Component<DashboardProps, DashboardState> {\n  initialState = {\n    token: this.props.token,\n    userJSON: {\n      _id: {\n        $oid: \"\",\n      },\n      username: \"\",\n      password: \"\",\n      portfolio: {\n        name: \"\",\n        cash: 0,\n      },\n      stocks: [],\n    },\n    JSONOrString: \"\",\n  };\n  state = this.initialState;\n\n  componentDidMount() {\n    this.refreshUserJSON();\n  }\n\n  componentDidUpdate(prevProps: DashboardProps, prevState: DashboardState) {\n    // check userJSON and if their stocks have changed then update userJSON state.\n    console.log(\"updating component\");\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      if (\n        // checks if stocks owned have changed.\n        typeof prevState.userJSON !== \"undefined\" &&\n        userJSON.stocks !== prevState.userJSON?.stocks &&\n        prevState.userJSON.stocks[0] &&\n        prevState.userJSON.stocks[0].symbol !== userJSON.stocks[0].symbol\n      ) {\n        this.setState({\n          userJSON: userJSON,\n        });\n      }\n    });\n  }\n\n  handleBuy = async (props: handleTradeProps): Promise<void> => {\n    return this.refreshUserJSON().then(() => {\n      if (props.cost > this.state.userJSON.portfolio.cash) {\n        return Promise.reject(\"You don't have enough cash to buy this stock!\");\n      }\n      const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n      const newStock = {\n        symbol: props.stockJSON.symbol,\n        quantity: props.quantity,\n        pricePurchased: props.stockJSON.latestPrice,\n        latestPrice: props.stockJSON.latestPrice,\n      };\n\n      function combineTwoStocks(newStock: Stock, oldStock: Stock) {\n        // quantity will be the sum of both,\n        // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n        // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n        // 1*10 = 10, 2*20 = 40, 50/3\n        const newTotalQuantity = newStock.quantity + oldStock.quantity;\n        const newAveragePricePurchased =\n          (newStock.quantity * newStock.pricePurchased +\n            oldStock.quantity * oldStock.pricePurchased) /\n          newTotalQuantity;\n        newStock.quantity = newTotalQuantity;\n        newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n        return newStock;\n      }\n\n      const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n      if (index !== -1) {\n        // if the user already owns the stock then combine them into one stock element\n        const newCombinedStock = combineTwoStocks(\n          newStock,\n          this.state.userJSON.stocks[index]\n        );\n        newStocks[index] = newCombinedStock;\n      } else {\n        // otherwise just add a new stock to the array\n        newStocks.push(newStock);\n      }\n\n      const newCash = this.state.userJSON.portfolio.cash - props.cost;\n      const newPortfolio = {\n        name: this.state.userJSON.portfolio.name,\n        cash: newCash,\n      };\n\n      updateUser(\n        this.state.userJSON._id,\n        newPortfolio,\n        newStocks,\n        this.state.token\n      ).then(() => {\n        return this.refreshUserJSON();\n      });\n    });\n  };\n\n  handleSell = async (props: handleTradeProps): Promise<void> => {\n    const index = getStockIndex(this.state.userJSON, props.stockJSON);\n    return this.refreshUserJSON().then(() => {\n      const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n      if (props.quantity > newStocks[index].quantity) {\n        window.alert(\n          \"You are trying to sell more stock than you own! Please lower the quantity\"\n        );\n        return Promise.reject();\n      }\n\n      if (props.quantity === newStocks[index].quantity) {\n        // if quantity is all of the existing stock's quantity, then remove the stock from the\n        // user's stocks\n        newStocks.splice(index, 1);\n      } else {\n        // otherwise, just subtract the sold quantity from the existing quantity\n        newStocks[index].quantity = newStocks[index].quantity - props.quantity;\n      }\n\n      const newCash = this.state.userJSON.portfolio.cash + props.cost;\n      const newPortfolio = {\n        name: this.state.userJSON.portfolio.name,\n        cash: newCash,\n      };\n\n      updateUser(\n        this.state.userJSON._id,\n        newPortfolio,\n        newStocks,\n        this.state.token\n      ).then(() => {\n        return this.refreshUserJSON();\n      });\n    });\n  };\n\n  async refreshUserJSON(): Promise<any> {\n    const userJSON = await getThisUserJSON(this.props.token);\n    if (userJSON) {\n      for (let i = 0; i < userJSON.stocks.length; i++) {\n        let stock: Stock = userJSON.stocks[i];\n        stock.latestPrice = await getStockLatestPrice(stock.symbol);\n      }\n      this.setState({\n        userJSON: userJSON,\n      });\n      return Promise.resolve();\n    }\n    return Promise.reject();\n  }\n\n  render() {\n    this.handleBuy = this.handleBuy.bind(this);\n    this.handleSell = this.handleSell.bind(this);\n\n    return (\n      <div className=\"background-container\">\n        <Header />\n        <PortfolioDetails\n          stocks={this.state.userJSON.stocks}\n          portfolio={this.state.userJSON.portfolio}\n        />\n        <OwnedStockList stocks={this.state.userJSON.stocks} />\n        <SearchForm\n          token={this.state.token}\n          handleBuy={this.handleBuy}\n          handleSell={this.handleSell}\n        />\n        <TopTenStocksList />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}