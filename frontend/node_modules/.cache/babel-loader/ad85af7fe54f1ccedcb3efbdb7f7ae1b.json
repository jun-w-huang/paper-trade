{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx\";\nimport React from \"react\";\nimport \"./styles/PaperTrade.css\";\nimport PortfolioDetails from \"./components/PortfolioDetails\";\nimport SearchForm from \"./components/forms/SearchForm\";\nimport OwnedStockList from \"./components/OwnedStocksList\";\nimport Header from \"./components/header\";\nimport { getStockIndex, getThisUserJSON } from \"./helpers\";\nimport TopTenStocksList from \"./components/TopTenStocksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PaperTrade extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.initialState = {\n      token: this.props.token,\n      userJSON: {\n        _id: {\n          $oid: \"\"\n        },\n        username: \"\",\n        password: \"\",\n        portfolio: {\n          name: \"\",\n          cash: 0\n        },\n        stocks: []\n      },\n      JSONOrString: \"\"\n    };\n    this.state = this.initialState;\n\n    this.handleBuy = async props => {\n      console.log(\"handlebuy running\");\n\n      const result = async () => {\n        getThisUserJSON(this.props.token).then(userJSON => {\n          this.setState({\n            userJSON: userJSON\n          });\n        }).then(() => {\n          if (props.cost > this.state.userJSON.portfolio.cash) {\n            window.alert(\"You don't have enough cash to buy this stock!\");\n            return false;\n          }\n\n          const newStocks = this.state.userJSON.stocks.slice();\n          const newStock = {\n            symbol: props.stockJSON.symbol,\n            quantity: props.quantity,\n            pricePurchased: props.stockJSON.latestPrice\n          };\n\n          function combineTwoStocks(newStock, oldStock) {\n            // quantity will be the sum of both,\n            // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n            // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n            // 1*10 = 10, 2*20 = 40, 50/3\n            const newTotalQuantity = newStock.quantity + oldStock.quantity;\n            const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n            newStock.quantity = newTotalQuantity;\n            newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n            return newStock;\n          }\n\n          const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n          if (index !== -1) {\n            const newCombinedStock = combineTwoStocks(newStock, this.state.userJSON.stocks[index]);\n            newStocks[index] = newCombinedStock;\n          } else {\n            newStocks.push(newStock);\n          }\n\n          const newCash = this.state.userJSON.portfolio.cash - props.cost;\n          const newPortfolio = {\n            name: this.state.userJSON.portfolio.name,\n            cash: newCash\n          };\n          const editedUser = {\n            portfolio: newPortfolio,\n            stocks: newStocks\n          };\n          fetch(`http://localhost:5000/update/${this.state.userJSON._id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(() => {\n            this.fetchUser();\n            return true;\n          }).catch(() => {\n            return true;\n          });\n        }).catch(() => {\n          return Promise.reject(true);\n        });\n      };\n\n      let x = await result;\n      return await result;\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"helloo component is updating!\");\n    getThisUserJSON(this.props.token).then(userJSON => {\n      var _prevState$userJSON;\n\n      if (userJSON.stocks !== ((_prevState$userJSON = prevState.userJSON) === null || _prevState$userJSON === void 0 ? void 0 : _prevState$userJSON.stocks) && typeof prevState.userJSON !== \"undefined\" && prevState.userJSON.stocks[1].symbol !== userJSON.stocks[1].symbol) {\n        this.setState({\n          userJSON: userJSON\n        });\n      }\n    });\n  }\n\n  handleSearch(JSONOrString) {\n    if (typeof JSONOrString === \"string\") {\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString\n      });\n    }\n  }\n\n  fetchUser() {\n    getThisUserJSON(this.props.token).then(userJSON => {\n      if (userJSON) {\n        this.setState({\n          userJSON: userJSON\n        });\n      }\n    });\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        username: this.state.userJSON.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n        portfolio: this.state.userJSON.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        userJSON: this.state.userJSON,\n        JSONOrString: this.state.JSONOrString,\n        handleSearch: this.handleSearch,\n        handleBuy: this.handleBuy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OwnedStockList, {\n        stocks: this.state.userJSON.stocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopTenStocksList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PaperTrade;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/PaperTrade.tsx"],"names":["React","PortfolioDetails","SearchForm","OwnedStockList","Header","getStockIndex","getThisUserJSON","TopTenStocksList","PaperTrade","Component","initialState","token","props","userJSON","_id","$oid","username","password","portfolio","name","cash","stocks","JSONOrString","state","handleBuy","console","log","result","then","setState","cost","window","alert","newStocks","slice","newStock","symbol","stockJSON","quantity","pricePurchased","latestPrice","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","index","newCombinedStock","push","newCash","newPortfolio","editedUser","fetch","method","body","JSON","stringify","headers","fetchUser","catch","Promise","reject","x","componentDidMount","componentDidUpdate","prevProps","prevState","handleSearch","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { handleBuyProps, IRootObject, Stock, userJSON } from \"./interfaces\";\nimport \"./styles/PaperTrade.css\";\n\nimport PortfolioDetails from \"./components/PortfolioDetails\";\nimport SearchForm from \"./components/forms/SearchForm\";\nimport OwnedStockList from \"./components/OwnedStocksList\";\nimport Header from \"./components/header\";\n\nimport { getStockIndex, getThisUserJSON } from \"./helpers\";\nimport TopTenStocksList from \"./components/TopTenStocksList\";\n\ntype PaperTradeProps = {\n  token: string;\n};\ntype PaperTradeState = {\n  token: string;\n  userJSON?: userJSON;\n  JSONOrString: IRootObject | string;\n};\n\nclass PaperTrade extends React.Component<PaperTradeProps, PaperTradeState> {\n  initialState = {\n    token: this.props.token,\n    userJSON: {\n      _id: {\n        $oid: \"\",\n      },\n      username: \"\",\n      password: \"\",\n      portfolio: {\n        name: \"\",\n        cash: 0,\n      },\n      stocks: [],\n    },\n    JSONOrString: \"\",\n  };\n  state = this.initialState;\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  componentDidUpdate(prevProps: PaperTradeProps, prevState: PaperTradeState) {\n    // console.log(\"helloo component is updating!\");\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      if (\n        userJSON.stocks !== prevState.userJSON?.stocks &&\n        typeof prevState.userJSON !== \"undefined\" &&\n        prevState.userJSON.stocks[1].symbol !== userJSON.stocks[1].symbol\n      ) {\n        this.setState({\n          userJSON: userJSON,\n        });\n      }\n    });\n  }\n\n  handleSearch(JSONOrString: IRootObject | string) {\n    if (typeof JSONOrString === \"string\") {\n      this.setState({\n        JSONOrString: JSONOrString,\n      });\n    } else {\n      this.setState({\n        JSONOrString: JSONOrString,\n      });\n    }\n  }\n\n  handleBuy = async (props: handleBuyProps): Promise<Boolean> => {\n    console.log(\"handlebuy running\");\n\n    const result = async (): Promise<Boolean> => {\n      getThisUserJSON(this.props.token)\n        .then((userJSON) => {\n          this.setState({\n            userJSON: userJSON,\n          });\n        })\n        .then(() => {\n          if (props.cost > this.state.userJSON.portfolio.cash) {\n            window.alert(\"You don't have enough cash to buy this stock!\");\n            return false;\n          }\n          const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n          const newStock = {\n            symbol: props.stockJSON.symbol,\n            quantity: props.quantity,\n            pricePurchased: props.stockJSON.latestPrice,\n          };\n\n          function combineTwoStocks(newStock: Stock, oldStock: Stock) {\n            // quantity will be the sum of both,\n            // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n            // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n            // 1*10 = 10, 2*20 = 40, 50/3\n            const newTotalQuantity = newStock.quantity + oldStock.quantity;\n            const newAveragePricePurchased =\n              (newStock.quantity * newStock.pricePurchased +\n                oldStock.quantity * oldStock.pricePurchased) /\n              newTotalQuantity;\n            newStock.quantity = newTotalQuantity;\n            newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n            return newStock;\n          }\n\n          const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n          if (index !== -1) {\n            const newCombinedStock = combineTwoStocks(\n              newStock,\n              this.state.userJSON.stocks[index]\n            );\n            newStocks[index] = newCombinedStock;\n          } else {\n            newStocks.push(newStock);\n          }\n\n          const newCash = this.state.userJSON.portfolio.cash - props.cost;\n          const newPortfolio = {\n            name: this.state.userJSON.portfolio.name,\n            cash: newCash,\n          };\n\n          const editedUser = {\n            portfolio: newPortfolio,\n            stocks: newStocks,\n          };\n\n          fetch(`http://localhost:5000/update/${this.state.userJSON._id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          })\n            .then(() => {\n              this.fetchUser();\n              return true;\n            })\n            .catch(() => {\n              return true;\n            });\n        })\n        .catch(() => {\n          return Promise.reject(true);\n        });\n    };\n\n    let x = await result;\n\n    return await result;\n  };\n\n  fetchUser() {\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      if (userJSON) {\n        this.setState({\n          userJSON: userJSON,\n        });\n      }\n    });\n  }\n\n  render() {\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleBuy = this.handleBuy.bind(this);\n\n    return (\n      <div className=\"container\">\n        <Header username={this.state.userJSON.username} />\n        <PortfolioDetails portfolio={this.state.userJSON.portfolio} />\n        <SearchForm\n          userJSON={this.state.userJSON}\n          JSONOrString={this.state.JSONOrString}\n          handleSearch={this.handleSearch}\n          handleBuy={this.handleBuy}\n        />\n        <OwnedStockList stocks={this.state.userJSON.stocks} />\n        <TopTenStocksList />\n      </div>\n    );\n  }\n}\n\nexport default PaperTrade;\n"]},"metadata":{},"sourceType":"module"}