{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockRow(props) {\n  _s();\n\n  const [latestPrice, setLatestPrice] = useState(100);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\"); // //initial price, runs once\n  // useLayoutEffect (() => {\n  //   console.log(\"hello layout effect running\")\n  //   getStockLatestPrice(props.stock.symbol).then((price) => {\n  //     console.log(`setting latest price to ${price}`)\n  //     setLatestPrice(price)\n  //   })\n  // }, []);\n  // sets latest price every 5 seconds\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await getStockLatestPrice(props.stock.symbol);\n      const newPrice = await response;\n      setLatestPrice(newPrice);\n      console.log(`new ${newPrice}`);\n      console.log(`latest ${latestPrice}`);\n\n      if (newPrice > latestPrice) {\n        setLatestPriceFontColor(\"green\");\n      } else {\n        setLatestPriceFontColor(\"red\");\n      }\n    };\n\n    const interval = setInterval(() => {\n      fetchPrice();\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        color: latestPriceFontColor\n      },\n      children: latestPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.pricePurchased\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice * props.stock.quantity - props.stock.pricePurchased * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StockRow, \"+wAexp1yoOjKn/RYOI4v3jlqsUE=\");\n\n_c = StockRow;\nexport default function StockList(props) {\n  // console.log(\"stocklist refreshing but why\")\n  // This method will map out the records on the table\n  const StocksToTable = stockList => {\n    return stockList.map(stock => /*#__PURE__*/_jsxDEV(StockRow, {\n      stock: stock //deleteStock={() => deleteStock(stock._id)}\n\n    }, stock.symbol, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this));\n  }; // This following section will display the table with the records of individuals.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Stock List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latest Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price Purchased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: StocksToTable(props.stocks)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 4\n  }, this);\n}\n_c2 = StockList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockRow\");\n$RefreshReg$(_c2, \"StockList\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx"],"names":["React","useEffect","useState","getStockLatestPrice","StockRow","props","latestPrice","setLatestPrice","latestPriceFontColor","setLatestPriceFontColor","fetchPrice","response","stock","symbol","newPrice","console","log","interval","setInterval","clearInterval","color","quantity","pricePurchased","toFixed","StockList","StocksToTable","stockList","map","stocks"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { Stock } from \"../interfaces\";\n\ninterface stockRowProps {\n  stock: Stock\n  //deleteStock: any\n  key: string\n}\n\n\nfunction StockRow(props: stockRowProps) {\n  const[latestPrice, setLatestPrice] = useState(100);\n  const[latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\")\n\n  // //initial price, runs once\n  // useLayoutEffect (() => {\n  //   console.log(\"hello layout effect running\")\n  //   getStockLatestPrice(props.stock.symbol).then((price) => {\n  //     console.log(`setting latest price to ${price}`)\n  //     setLatestPrice(price)\n  //   })\n  // }, []);\n\n  // sets latest price every 5 seconds\n  useEffect (() => {\n    const fetchPrice = async () => {\n      const response = await getStockLatestPrice(props.stock.symbol)\n      const newPrice = await response\n      setLatestPrice(newPrice);\n      console.log(`new ${newPrice}`)\n      console.log(`latest ${latestPrice}`)\n      if (newPrice > latestPrice) {\n        setLatestPriceFontColor(\"green\")\n      } else {\n        setLatestPriceFontColor(\"red\")\n      }\n    }\n\n    const interval = setInterval(() => {\n      fetchPrice()\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return(\n    <tr>\n      <td>{props.stock.symbol}</td>\n      <td style={{color: latestPriceFontColor}}>{latestPrice}</td>\n      <td>{props.stock.quantity}</td>\n      <td>{props.stock.pricePurchased}</td>\n      <td>{+(latestPrice*props.stock.quantity).toFixed(2)}</td>\n      <td>{+(latestPrice*props.stock.quantity-props.stock.pricePurchased*props.stock.quantity).toFixed(2)}</td>\n    </tr>\n  )\n}\n \n\ninterface stockListProps {\n  stocks: Stock[]\n}\nexport default function StockList(props: stockListProps) {\n  // console.log(\"stocklist refreshing but why\")\n \n // This method will map out the records on the table\n const StocksToTable = (stockList: Stock[]) => {\n  return (\n    stockList.map((stock =>\n      <StockRow\n           stock={stock}\n           //deleteStock={() => deleteStock(stock._id)}\n           key={stock.symbol}\n         />\n    )))\n }\n \n // This following section will display the table with the records of individuals.\n return (\n   <div>\n     <h3>Stock List</h3>\n     <table>\n       <thead>\n         <tr>\n           <th>Symbol</th>\n           <th>Latest Price</th>\n           <th>Quantity</th>\n           <th>Price Purchased</th>\n           <th>Value</th>\n           <th>Net Value</th>\n         </tr>\n       </thead>\n       <tbody>{StocksToTable(props.stocks)}</tbody>\n     </table>\n   </div>\n );\n}"]},"metadata":{},"sourceType":"module"}