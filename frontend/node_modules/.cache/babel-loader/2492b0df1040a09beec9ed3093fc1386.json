{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/dashboard/Dashboard.tsx\";\nimport React from \"react\";\nimport \"../styles/Dashboard.css\";\nimport PortfolioDetails from \"./PortfolioDetails\";\nimport SearchForm from \"./SearchForm\";\nimport OwnedStockList from \"./OwnedStocksList\";\nimport Header from \"./Header\";\nimport { getStockIndex, getStockLatestPrice, getThisUserJSON, updateUser } from \"./helpers\";\nimport TopTenStocksList from \"./TopTenStocksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.initialState = {\n      token: this.props.token,\n      userJSON: {\n        _id: {\n          $oid: \"\"\n        },\n        username: \"\",\n        password: \"\",\n        portfolio: {\n          name: \"\",\n          cash: 0\n        },\n        stocks: []\n      },\n      JSONOrString: \"\"\n    };\n    this.state = this.initialState;\n\n    this.handleBuy = async props => {\n      if (props.cost > this.state.userJSON.portfolio.cash) {\n        return Promise.reject(\"You don't have enough cash to buy this stock!\");\n      }\n\n      const newStocks = this.state.userJSON.stocks.slice();\n      const newStock = {\n        symbol: props.stockJSON.symbol,\n        quantity: props.quantity,\n        pricePurchased: props.stockJSON.latestPrice,\n        latestPrice: props.stockJSON.latestPrice\n      };\n\n      function combineTwoStocks(newStock, oldStock) {\n        // quantity will be the sum of both,\n        // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n        // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n        // 1*10 = 10, 2*20 = 40, 50/3\n        const newTotalQuantity = newStock.quantity + oldStock.quantity;\n        const newAveragePricePurchased = (newStock.quantity * newStock.pricePurchased + oldStock.quantity * oldStock.pricePurchased) / newTotalQuantity;\n        newStock.quantity = newTotalQuantity;\n        newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n        return newStock;\n      }\n\n      const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n      if (index !== -1) {\n        // if the user already owns the stock then combine them into one stock element\n        const newCombinedStock = combineTwoStocks(newStock, this.state.userJSON.stocks[index]);\n        newStocks[index] = newCombinedStock;\n      } else {\n        // otherwise just add a new stock to the array\n        newStocks.push(newStock);\n      }\n\n      const newCash = this.state.userJSON.portfolio.cash - props.cost;\n      const newPortfolio = {\n        name: this.state.userJSON.portfolio.name,\n        cash: newCash\n      };\n      updateUser(this.state.userJSON._id, newPortfolio, newStocks, this.state.token).then(() => {\n        this.refreshUserJSON();\n      });\n    };\n\n    this.handleSell = async props => {\n      const newStocks = this.state.userJSON.stocks.slice();\n      const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n      if (props.quantity > newStocks[index].quantity) {\n        return Promise.reject(\"You are trying to sell more stock than you own! Please lower the quantity\");\n      }\n\n      if (props.quantity === newStocks[index].quantity) {\n        // if quantity is all of the existing stock's quantity, then remove the stock from the\n        // user's stocks\n        newStocks.splice(index, 1);\n      } else {\n        // otherwise, just subtract the sold quantity from the existing quantity\n        newStocks[index].quantity = newStocks[index].quantity - props.quantity;\n      }\n\n      const newCash = this.state.userJSON.portfolio.cash + props.cost;\n      const newPortfolio = {\n        name: this.state.userJSON.portfolio.name,\n        cash: newCash\n      };\n      updateUser(this.state.userJSON._id, newPortfolio, newStocks, this.state.token).then(() => {\n        this.refreshUserJSON();\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.refreshUserJSON();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // check userJSON and if their stocks have changed then update userJSON state.\n    console.log(\"updating component\");\n    getThisUserJSON(this.props.token).then(userJSON => {\n      var _prevState$userJSON;\n\n      console.log(userJSON);\n\n      if (this.state.userJSON.stocks.length !== ((_prevState$userJSON = prevState.userJSON) === null || _prevState$userJSON === void 0 ? void 0 : _prevState$userJSON.stocks.length)) {\n        console.log(\"length changed\");\n        return;\n      } else {\n        for (let i = 0; i < this.state.userJSON.stocks.length; i++) {\n          const stock = this.state.userJSON.stocks[i];\n          const prevStock = prevState.userJSON.stocks[i];\n\n          if (stock.symbol !== prevStock.symbol) {\n            console.log(\"symbol changed\");\n          }\n\n          if (stock.pricePurchased !== prevStock.pricePurchased) {\n            console.log(\"price changed\");\n          }\n\n          if (stock.quantity !== prevStock.quantity) {\n            console.log(\"quantity changed\");\n          }\n\n          return;\n        }\n      }\n\n      this.setState({\n        userJSON: userJSON\n      });\n    });\n  }\n\n  async refreshUserJSON() {\n    const userJSON = await getThisUserJSON(this.props.token);\n\n    if (userJSON) {\n      for (let i = 0; i < userJSON.stocks.length; i++) {\n        let stock = userJSON.stocks[i];\n        stock.latestPrice = await getStockLatestPrice(stock.symbol);\n      }\n\n      this.setState({\n        userJSON: userJSON\n      });\n    }\n  }\n\n  render() {\n    this.handleBuy = this.handleBuy.bind(this);\n    this.handleSell = this.handleSell.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PortfolioDetails, {\n        stocks: this.state.userJSON.stocks,\n        portfolio: this.state.userJSON.portfolio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OwnedStockList, {\n        stocks: this.state.userJSON.stocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        token: this.state.token,\n        handleBuy: this.handleBuy,\n        handleSell: this.handleSell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopTenStocksList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/dashboard/Dashboard.tsx"],"names":["React","PortfolioDetails","SearchForm","OwnedStockList","Header","getStockIndex","getStockLatestPrice","getThisUserJSON","updateUser","TopTenStocksList","Dashboard","Component","initialState","token","props","userJSON","_id","$oid","username","password","portfolio","name","cash","stocks","JSONOrString","state","handleBuy","cost","Promise","reject","newStocks","slice","newStock","symbol","stockJSON","quantity","pricePurchased","latestPrice","combineTwoStocks","oldStock","newTotalQuantity","newAveragePricePurchased","toFixed","index","newCombinedStock","push","newCash","newPortfolio","then","refreshUserJSON","handleSell","splice","componentDidMount","componentDidUpdate","prevProps","prevState","console","log","length","i","stock","prevStock","setState","render","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,yBAAP;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SACEC,aADF,EAEEC,mBAFF,EAGEC,eAHF,EAIEC,UAJF,QAKO,WALP;AAMA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAWA,MAAMC,SAAN,SAAwBV,KAAK,CAACW,SAA9B,CAAwE;AAAA;AAAA;AAAA,SACtEC,YADsE,GACvD;AACbC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KADL;AAEbE,MAAAA,QAAQ,EAAE;AACRC,QAAAA,GAAG,EAAE;AACHC,UAAAA,IAAI,EAAE;AADH,SADG;AAIRC,QAAAA,QAAQ,EAAE,EAJF;AAKRC,QAAAA,QAAQ,EAAE,EALF;AAMRC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAE,EADG;AAETC,UAAAA,IAAI,EAAE;AAFG,SANH;AAURC,QAAAA,MAAM,EAAE;AAVA,OAFG;AAcbC,MAAAA,YAAY,EAAE;AAdD,KADuD;AAAA,SAiBtEC,KAjBsE,GAiB9D,KAAKb,YAjByD;;AAAA,SAuDtEc,SAvDsE,GAuD1D,MAAOZ,KAAP,IAAkD;AAC5D,UAAIA,KAAK,CAACa,IAAN,GAAa,KAAKF,KAAL,CAAWV,QAAX,CAAoBK,SAApB,CAA8BE,IAA/C,EAAqD;AACnD,eAAOM,OAAO,CAACC,MAAR,CAAe,+CAAf,CAAP;AACD;;AACD,YAAMC,SAAkB,GAAG,KAAKL,KAAL,CAAWV,QAAX,CAAoBQ,MAApB,CAA2BQ,KAA3B,EAA3B;AAEA,YAAMC,QAAQ,GAAG;AACfC,QAAAA,MAAM,EAAEnB,KAAK,CAACoB,SAAN,CAAgBD,MADT;AAEfE,QAAAA,QAAQ,EAAErB,KAAK,CAACqB,QAFD;AAGfC,QAAAA,cAAc,EAAEtB,KAAK,CAACoB,SAAN,CAAgBG,WAHjB;AAIfA,QAAAA,WAAW,EAAEvB,KAAK,CAACoB,SAAN,CAAgBG;AAJd,OAAjB;;AAOA,eAASC,gBAAT,CAA0BN,QAA1B,EAA2CO,QAA3C,EAA4D;AAC1D;AACA;AACA;AACA;AACA,cAAMC,gBAAgB,GAAGR,QAAQ,CAACG,QAAT,GAAoBI,QAAQ,CAACJ,QAAtD;AACA,cAAMM,wBAAwB,GAC5B,CAACT,QAAQ,CAACG,QAAT,GAAoBH,QAAQ,CAACI,cAA7B,GACCG,QAAQ,CAACJ,QAAT,GAAoBI,QAAQ,CAACH,cAD/B,IAEAI,gBAHF;AAIAR,QAAAA,QAAQ,CAACG,QAAT,GAAoBK,gBAApB;AACAR,QAAAA,QAAQ,CAACI,cAAT,GAA0B,CAACK,wBAAwB,CAACC,OAAzB,CAAiC,CAAjC,CAA3B;AACA,eAAOV,QAAP;AACD;;AAED,YAAMW,KAAK,GAAGtC,aAAa,CAAC,KAAKoB,KAAL,CAAWV,QAAZ,EAAsBD,KAAK,CAACoB,SAA5B,CAA3B;;AAEA,UAAIS,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA,cAAMC,gBAAgB,GAAGN,gBAAgB,CACvCN,QADuC,EAEvC,KAAKP,KAAL,CAAWV,QAAX,CAAoBQ,MAApB,CAA2BoB,KAA3B,CAFuC,CAAzC;AAIAb,QAAAA,SAAS,CAACa,KAAD,CAAT,GAAmBC,gBAAnB;AACD,OAPD,MAOO;AACL;AACAd,QAAAA,SAAS,CAACe,IAAV,CAAeb,QAAf;AACD;;AAED,YAAMc,OAAO,GAAG,KAAKrB,KAAL,CAAWV,QAAX,CAAoBK,SAApB,CAA8BE,IAA9B,GAAqCR,KAAK,CAACa,IAA3D;AACA,YAAMoB,YAAY,GAAG;AACnB1B,QAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWV,QAAX,CAAoBK,SAApB,CAA8BC,IADjB;AAEnBC,QAAAA,IAAI,EAAEwB;AAFa,OAArB;AAKAtC,MAAAA,UAAU,CACR,KAAKiB,KAAL,CAAWV,QAAX,CAAoBC,GADZ,EAER+B,YAFQ,EAGRjB,SAHQ,EAIR,KAAKL,KAAL,CAAWZ,KAJH,CAAV,CAKEmC,IALF,CAKO,MAAM;AACX,aAAKC,eAAL;AACD,OAPD;AAQD,KA/GqE;;AAAA,SAiHtEC,UAjHsE,GAiHzD,MAAOpC,KAAP,IAAkD;AAC7D,YAAMgB,SAAkB,GAAG,KAAKL,KAAL,CAAWV,QAAX,CAAoBQ,MAApB,CAA2BQ,KAA3B,EAA3B;AAEA,YAAMY,KAAK,GAAGtC,aAAa,CAAC,KAAKoB,KAAL,CAAWV,QAAZ,EAAsBD,KAAK,CAACoB,SAA5B,CAA3B;;AACA,UAAIpB,KAAK,CAACqB,QAAN,GAAiBL,SAAS,CAACa,KAAD,CAAT,CAAiBR,QAAtC,EAAgD;AAC9C,eAAOP,OAAO,CAACC,MAAR,CACL,2EADK,CAAP;AAGD;;AAED,UAAIf,KAAK,CAACqB,QAAN,KAAmBL,SAAS,CAACa,KAAD,CAAT,CAAiBR,QAAxC,EAAkD;AAChD;AACA;AACAL,QAAAA,SAAS,CAACqB,MAAV,CAAiBR,KAAjB,EAAwB,CAAxB;AACD,OAJD,MAIO;AACL;AACAb,QAAAA,SAAS,CAACa,KAAD,CAAT,CAAiBR,QAAjB,GAA4BL,SAAS,CAACa,KAAD,CAAT,CAAiBR,QAAjB,GAA4BrB,KAAK,CAACqB,QAA9D;AACD;;AAED,YAAMW,OAAO,GAAG,KAAKrB,KAAL,CAAWV,QAAX,CAAoBK,SAApB,CAA8BE,IAA9B,GAAqCR,KAAK,CAACa,IAA3D;AACA,YAAMoB,YAAY,GAAG;AACnB1B,QAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWV,QAAX,CAAoBK,SAApB,CAA8BC,IADjB;AAEnBC,QAAAA,IAAI,EAAEwB;AAFa,OAArB;AAKAtC,MAAAA,UAAU,CACR,KAAKiB,KAAL,CAAWV,QAAX,CAAoBC,GADZ,EAER+B,YAFQ,EAGRjB,SAHQ,EAIR,KAAKL,KAAL,CAAWZ,KAJH,CAAV,CAKEmC,IALF,CAKO,MAAM;AACX,aAAKC,eAAL;AACD,OAPD;AAQD,KAlJqE;AAAA;;AAmBtEG,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,eAAL;AACD;;AAEDI,EAAAA,kBAAkB,CAACC,SAAD,EAA4BC,SAA5B,EAAuD;AACvE;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAlD,IAAAA,eAAe,CAAC,KAAKO,KAAL,CAAWD,KAAZ,CAAf,CAAkCmC,IAAlC,CAAwCjC,QAAD,IAAc;AAAA;;AACnDyC,MAAAA,OAAO,CAACC,GAAR,CAAY1C,QAAZ;;AACA,UACE,KAAKU,KAAL,CAAWV,QAAX,CAAoBQ,MAApB,CAA2BmC,MAA3B,6BAAsCH,SAAS,CAACxC,QAAhD,wDAAsC,oBAAoBQ,MAApB,CAA2BmC,MAAjE,CADF,EAEE;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACD,OALD,MAKO;AACL,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlC,KAAL,CAAWV,QAAX,CAAoBQ,MAApB,CAA2BmC,MAA/C,EAAuDC,CAAC,EAAxD,EAA4D;AAC1D,gBAAMC,KAAY,GAAG,KAAKnC,KAAL,CAAWV,QAAX,CAAoBQ,MAApB,CAA2BoC,CAA3B,CAArB;AACA,gBAAME,SAAgB,GAAGN,SAAS,CAACxC,QAAV,CAAmBQ,MAAnB,CAA0BoC,CAA1B,CAAzB;;AACA,cAAIC,KAAK,CAAC3B,MAAN,KAAiB4B,SAAS,CAAC5B,MAA/B,EAAuC;AACrCuB,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;;AACD,cAAIG,KAAK,CAACxB,cAAN,KAAyByB,SAAS,CAACzB,cAAvC,EAAuD;AACrDoB,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AACD,cAAIG,KAAK,CAACzB,QAAN,KAAmB0B,SAAS,CAAC1B,QAAjC,EAA2C;AACzCqB,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;AACD;AACD;AACF;;AACD,WAAKK,QAAL,CAAc;AACZ/C,QAAAA,QAAQ,EAAEA;AADE,OAAd;AAGD,KA1BD;AA2BD;;AA+FoB,QAAfkC,eAAe,GAAG;AACtB,UAAMlC,QAAQ,GAAG,MAAMR,eAAe,CAAC,KAAKO,KAAL,CAAWD,KAAZ,CAAtC;;AACA,QAAIE,QAAJ,EAAc;AACZ,WAAK,IAAI4C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,QAAQ,CAACQ,MAAT,CAAgBmC,MAApC,EAA4CC,CAAC,EAA7C,EAAiD;AAC/C,YAAIC,KAAY,GAAG7C,QAAQ,CAACQ,MAAT,CAAgBoC,CAAhB,CAAnB;AACAC,QAAAA,KAAK,CAACvB,WAAN,GAAoB,MAAM/B,mBAAmB,CAACsD,KAAK,CAAC3B,MAAP,CAA7C;AACD;;AACD,WAAK6B,QAAL,CAAc;AACZ/C,QAAAA,QAAQ,EAAEA;AADE,OAAd;AAGD;AACF;;AAEDgD,EAAAA,MAAM,GAAG;AACP,SAAKrC,SAAL,GAAiB,KAAKA,SAAL,CAAesC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKd,UAAL,GAAkB,KAAKA,UAAL,CAAgBc,IAAhB,CAAqB,IAArB,CAAlB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,gBAAD;AACE,QAAA,MAAM,EAAE,KAAKvC,KAAL,CAAWV,QAAX,CAAoBQ,MAD9B;AAEE,QAAA,SAAS,EAAE,KAAKE,KAAL,CAAWV,QAAX,CAAoBK;AAFjC;AAAA;AAAA;AAAA;AAAA,cAFF,eAME,QAAC,cAAD;AAAgB,QAAA,MAAM,EAAE,KAAKK,KAAL,CAAWV,QAAX,CAAoBQ;AAA5C;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,UAAD;AACE,QAAA,KAAK,EAAE,KAAKE,KAAL,CAAWZ,KADpB;AAEE,QAAA,SAAS,EAAE,KAAKa,SAFlB;AAGE,QAAA,UAAU,EAAE,KAAKwB;AAHnB;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AArLqE;;AAwLxE,eAAexC,SAAf","sourcesContent":["import React from \"react\";\nimport { handleTradeProps, IRootObject, Stock, userJSON } from \"./interfaces\";\nimport \"../styles/Dashboard.css\";\n\nimport PortfolioDetails from \"./PortfolioDetails\";\nimport SearchForm from \"./SearchForm\";\nimport OwnedStockList from \"./OwnedStocksList\";\nimport Header from \"./Header\";\n\nimport {\n  getStockIndex,\n  getStockLatestPrice,\n  getThisUserJSON,\n  updateUser,\n} from \"./helpers\";\nimport TopTenStocksList from \"./TopTenStocksList\";\n\ntype DashboardProps = {\n  token: string;\n};\ntype DashboardState = {\n  token: string;\n  userJSON?: userJSON;\n  JSONOrString: IRootObject | string;\n};\n\nclass Dashboard extends React.Component<DashboardProps, DashboardState> {\n  initialState = {\n    token: this.props.token,\n    userJSON: {\n      _id: {\n        $oid: \"\",\n      },\n      username: \"\",\n      password: \"\",\n      portfolio: {\n        name: \"\",\n        cash: 0,\n      },\n      stocks: [],\n    },\n    JSONOrString: \"\",\n  };\n  state = this.initialState;\n\n  componentDidMount() {\n    this.refreshUserJSON();\n  }\n\n  componentDidUpdate(prevProps: DashboardProps, prevState: DashboardState) {\n    // check userJSON and if their stocks have changed then update userJSON state.\n    console.log(\"updating component\");\n    getThisUserJSON(this.props.token).then((userJSON) => {\n      console.log(userJSON);\n      if (\n        this.state.userJSON.stocks.length !== prevState.userJSON?.stocks.length\n      ) {\n        console.log(\"length changed\");\n        return;\n      } else {\n        for (let i = 0; i < this.state.userJSON.stocks.length; i++) {\n          const stock: Stock = this.state.userJSON.stocks[i];\n          const prevStock: Stock = prevState.userJSON.stocks[i];\n          if (stock.symbol !== prevStock.symbol) {\n            console.log(\"symbol changed\");\n          }\n          if (stock.pricePurchased !== prevStock.pricePurchased) {\n            console.log(\"price changed\");\n          }\n          if (stock.quantity !== prevStock.quantity) {\n            console.log(\"quantity changed\");\n          }\n          return;\n        }\n      }\n      this.setState({\n        userJSON: userJSON,\n      });\n    });\n  }\n\n  handleBuy = async (props: handleTradeProps): Promise<void> => {\n    if (props.cost > this.state.userJSON.portfolio.cash) {\n      return Promise.reject(\"You don't have enough cash to buy this stock!\");\n    }\n    const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n    const newStock = {\n      symbol: props.stockJSON.symbol,\n      quantity: props.quantity,\n      pricePurchased: props.stockJSON.latestPrice,\n      latestPrice: props.stockJSON.latestPrice,\n    };\n\n    function combineTwoStocks(newStock: Stock, oldStock: Stock) {\n      // quantity will be the sum of both,\n      // price purchased will be (q1 * pricepurchased1 + q2 * pricepurchased2)/ (q1+q2)\n      // eg: 1 stock at 10$, and you buy 2 stocks at 20$, the average price should become\n      // 1*10 = 10, 2*20 = 40, 50/3\n      const newTotalQuantity = newStock.quantity + oldStock.quantity;\n      const newAveragePricePurchased =\n        (newStock.quantity * newStock.pricePurchased +\n          oldStock.quantity * oldStock.pricePurchased) /\n        newTotalQuantity;\n      newStock.quantity = newTotalQuantity;\n      newStock.pricePurchased = +newAveragePricePurchased.toFixed(2);\n      return newStock;\n    }\n\n    const index = getStockIndex(this.state.userJSON, props.stockJSON);\n\n    if (index !== -1) {\n      // if the user already owns the stock then combine them into one stock element\n      const newCombinedStock = combineTwoStocks(\n        newStock,\n        this.state.userJSON.stocks[index]\n      );\n      newStocks[index] = newCombinedStock;\n    } else {\n      // otherwise just add a new stock to the array\n      newStocks.push(newStock);\n    }\n\n    const newCash = this.state.userJSON.portfolio.cash - props.cost;\n    const newPortfolio = {\n      name: this.state.userJSON.portfolio.name,\n      cash: newCash,\n    };\n\n    updateUser(\n      this.state.userJSON._id,\n      newPortfolio,\n      newStocks,\n      this.state.token\n    ).then(() => {\n      this.refreshUserJSON();\n    });\n  };\n\n  handleSell = async (props: handleTradeProps): Promise<void> => {\n    const newStocks: Stock[] = this.state.userJSON.stocks.slice();\n\n    const index = getStockIndex(this.state.userJSON, props.stockJSON);\n    if (props.quantity > newStocks[index].quantity) {\n      return Promise.reject(\n        \"You are trying to sell more stock than you own! Please lower the quantity\"\n      );\n    }\n\n    if (props.quantity === newStocks[index].quantity) {\n      // if quantity is all of the existing stock's quantity, then remove the stock from the\n      // user's stocks\n      newStocks.splice(index, 1);\n    } else {\n      // otherwise, just subtract the sold quantity from the existing quantity\n      newStocks[index].quantity = newStocks[index].quantity - props.quantity;\n    }\n\n    const newCash = this.state.userJSON.portfolio.cash + props.cost;\n    const newPortfolio = {\n      name: this.state.userJSON.portfolio.name,\n      cash: newCash,\n    };\n\n    updateUser(\n      this.state.userJSON._id,\n      newPortfolio,\n      newStocks,\n      this.state.token\n    ).then(() => {\n      this.refreshUserJSON();\n    });\n  };\n\n  async refreshUserJSON() {\n    const userJSON = await getThisUserJSON(this.props.token);\n    if (userJSON) {\n      for (let i = 0; i < userJSON.stocks.length; i++) {\n        let stock: Stock = userJSON.stocks[i];\n        stock.latestPrice = await getStockLatestPrice(stock.symbol);\n      }\n      this.setState({\n        userJSON: userJSON,\n      });\n    }\n  }\n\n  render() {\n    this.handleBuy = this.handleBuy.bind(this);\n    this.handleSell = this.handleSell.bind(this);\n\n    return (\n      <div className=\"background-container\">\n        <Header />\n        <PortfolioDetails\n          stocks={this.state.userJSON.stocks}\n          portfolio={this.state.userJSON.portfolio}\n        />\n        <OwnedStockList stocks={this.state.userJSON.stocks} />\n        <SearchForm\n          token={this.state.token}\n          handleBuy={this.handleBuy}\n          handleSell={this.handleSell}\n        />\n        <TopTenStocksList />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}