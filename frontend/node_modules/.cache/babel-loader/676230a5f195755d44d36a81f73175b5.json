{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BuyAndSellForm(props) {\n  _s();\n\n  const [formData, setFormData] = useState({\n    // \"_id\": {\n    //     \"$oid\": props.userJSON._id\n    //   },\n    //   \"username\": props.userJSON.username,\n    //   \"password\": props.userJSON.password,\n    //   \"portfolio\": props.userJSON.portfolio,\n    //   \"stocks\": props.userJSON.stocks,\n    symbol: props.stockJSON.symbol,\n    quantity: \"100\",\n    pricePurchased: props.stockJSON.latestPrice\n  });\n  const [quantity, setQuantity] = useState(100);\n  const [cost, setCost] = useState(0); // const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n  const params = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function fetchData() {\n      var _params$id;\n\n      const id = params === null || params === void 0 ? void 0 : (_params$id = params.id) === null || _params$id === void 0 ? void 0 : _params$id.toString();\n      const response = await fetch(`http://localhost:5000/users/${props.userJSON._id.$oid}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const user = await response.json();\n\n      if (!user) {\n        window.alert(`user with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setFormData(user);\n    }\n\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  function updateFormData(value) {\n    return setFormData(prev => {\n      return { ...prev,\n        ...value\n      };\n    });\n  }\n\n  useEffect(() => {\n    console.log(\"use effect triggered\");\n    setCost(quantity * props.stockJSON.latestPrice);\n  });\n\n  const onChange = e => {\n    setQuantity(parseInt(e.target.value));\n    setCost(parseInt(e.target.value) * props.stockJSON.latestPrice);\n  };\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (cost > props.userJSON.portfolio.cash) {\n      window.alert(\"You don't have enough cash to buy this stock!\");\n      return;\n    }\n\n    const stocks = props.userJSON.stocks.slice();\n    const newStock = {\n      symbol: formData.symbol,\n      quantity: parseInt(formData.quantity),\n      pricePurchased: formData.pricePurchased\n    };\n    stocks.push(newStock);\n    const editedUser = {\n      \"_id\": props.userJSON._id,\n      \"username\": props.userJSON.username,\n      \"password\": props.userJSON.password,\n      \"portfolio\": props.userJSON.portfolio,\n      \"stocks\": stocks\n    };\n    await fetch(`http://localhost:5000/update/${props.userJSON._id.$oid}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(\"submitting buy form\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BuyForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        children: \"Quantity: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"quantity\",\n        defaultValue: \"100\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        name: \"buyButton\",\n        value: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cost / Revenue: \", cost.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BuyAndSellForm, \"PkUEOwQ71eYlL/8eSIsRPo76JTI=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = BuyAndSellForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyAndSellForm\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/forms/BuyAndSellForm.tsx"],"names":["React","useEffect","useState","useParams","useNavigate","BuyAndSellForm","props","formData","setFormData","symbol","stockJSON","quantity","pricePurchased","latestPrice","setQuantity","cost","setCost","params","navigate","fetchData","id","toString","response","fetch","userJSON","_id","$oid","ok","message","statusText","window","alert","user","json","updateFormData","value","prev","console","log","onChange","e","parseInt","target","onSubmit","preventDefault","portfolio","cash","stocks","slice","newStock","push","editedUser","username","password","method","body","JSON","stringify","headers","toFixed"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { IRootObject, Portfolio, userJSON } from \"../../interfaces\";\n\ninterface BuyAndSellFormProps {\n    userJSON: userJSON\n    stockJSON : IRootObject\n    portfolio: Portfolio\n    // handleBuy: (cost: number, quantity: number, stockJSON: IRootObject) => void\n}\n\n\nexport default function BuyAndSellForm(props: BuyAndSellFormProps){\n    const [formData, setFormData] = useState({\n        // \"_id\": {\n        //     \"$oid\": props.userJSON._id\n        //   },\n        //   \"username\": props.userJSON.username,\n        //   \"password\": props.userJSON.password,\n        //   \"portfolio\": props.userJSON.portfolio,\n        //   \"stocks\": props.userJSON.stocks,\n        symbol: props.stockJSON.symbol,\n        quantity: \"100\",\n        pricePurchased: props.stockJSON.latestPrice,\n    })\n\n    const [quantity, setQuantity] = useState(100)\n\n    const [cost, setCost] = useState(0);\n    // const [sellButtonVisibility, setSellButtonVisibility] = useState(false)\n\n    const params = useParams();\n    const navigate = useNavigate();\n\n\n    useEffect(() => {\n        async function fetchData() {\n            const id = params?.id?.toString();\n            const response = await fetch(`http://localhost:5000/users/${props.userJSON._id.$oid}`);\n            if (!response.ok) {\n                const message = `An error has occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n      \n            const user = await response.json();\n            if (!user) {\n                window.alert(`user with id ${id} not found`);\n                navigate(\"/\");\n                return;\n            }\n        \n            setFormData(user);\n        }\n      \n        fetchData();\n      \n        return;\n    }, [params.id, navigate]);\n\n    function updateFormData(value: any) {\n        return setFormData((prev: any) => {\n          return { ...prev, ...value };\n        });\n      }\n\n    useEffect(() => {\n        console.log(\"use effect triggered\")\n        setCost(quantity*props.stockJSON.latestPrice)\n    });\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setQuantity(parseInt(e.target.value))\n\n        setCost(parseInt(e.target.value)*props.stockJSON.latestPrice)\n    };\n\n    async function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n\n        if (cost > props.userJSON.portfolio.cash) {\n            window.alert(\"You don't have enough cash to buy this stock!\")\n            return;\n        }\n\n        const stocks = props.userJSON.stocks.slice()\n\n        const newStock = {\n            symbol: formData.symbol,\n            quantity: parseInt(formData.quantity),\n            pricePurchased: formData.pricePurchased,\n        }\n\n        stocks.push(newStock)\n\n        const editedUser = {\n            \"_id\": props.userJSON._id,\n            \"username\": props.userJSON.username,\n            \"password\": props.userJSON.password,\n            \"portfolio\": props.userJSON.portfolio,\n            \"stocks\": stocks\n          };\n\n        await fetch(`http://localhost:5000/update/${props.userJSON._id.$oid}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedUser),\n            headers: {\n            'Content-Type': 'application/json'\n            },\n        });\n        console.log(\"submitting buy form\")\n    }\n\n    return(\n        <div id=\"BuyForm\">\n            <form onSubmit={onSubmit}>\n                <label htmlFor=\"quantity\">Quantity: </label>\n                <input type=\"text\" id=\"quantity\" defaultValue=\"100\" onChange={onChange}/>\n                <input type=\"submit\" name=\"buyButton\" value=\"Buy\"/>\n                {/* <input type=\"button\" hidden={sellButtonVisibility} value=\"Sell\" onClick={() => onSell()}/> */}\n                {/* <Link className=\"btn btn-link\" to={`/edit/${props.userJSON._id}`}>Edit</Link> */}\n            </form>\n            <p>Cost / Revenue: {cost.toFixed(2)}</p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}