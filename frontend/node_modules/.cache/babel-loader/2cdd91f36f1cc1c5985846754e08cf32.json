{"ast":null,"code":"var _jsxFileName = \"/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockRow(props) {\n  _s();\n\n  const [latestPrice, setLatestPrice] = useState(0);\n  const [latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\"); //initial price, runs once\n\n  useLayoutEffect(() => {\n    getStockLatestPrice(props.stock.symbol).then(price => {\n      setLatestPrice(price);\n    });\n  }, []); // sets latest price every 5 seconds\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getStockLatestPrice(props.stock.symbol).then(newPrice => {\n        if (newPrice > latestPrice) {\n          setLatestPriceFontColor(\"green\");\n        } else {\n          setLatestPriceFontColor(\"red\");\n        }\n\n        setLatestPrice(newPrice);\n      });\n    }, 99999999);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        color: latestPriceFontColor\n      },\n      children: latestPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.quantity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.stock.pricePurchased\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(parseFloat(latestPrice) * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: +(latestPrice * props.stock.quantity - props.stock.pricePurchased * props.stock.quantity).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StockRow, \"dSC8JRzD2dVJdUWTD3a9hJSLs8U=\");\n\n_c = StockRow;\nexport default function StockList(props) {\n  // This method will delete a record\n  //  async function deleteStock(id: any) {\n  //    await fetch(`http://localhost:5000/${id}`, {\n  //      method: \"DELETE\"\n  //    });\n  //    const newStocks = stocks.filter((el) => el._id !== id);\n  //    setStocks(newStocks);\n  //  }\n  // This method will map out the records on the table\n  const StocksToTable = stockList => {\n    return stockList.map(stock => /*#__PURE__*/_jsxDEV(StockRow, {\n      stock: stock //deleteStock={() => deleteStock(stock._id)}\n\n    }, stock._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this));\n  }; // This following section will display the table with the records of individuals.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Stock List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latest Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price Purchased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Net Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: StocksToTable(props.stocks)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 4\n  }, this);\n}\n_c2 = StockList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockRow\");\n$RefreshReg$(_c2, \"StockList\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/components/stockList.tsx"],"names":["React","useEffect","useLayoutEffect","useState","getStockLatestPrice","StockRow","props","latestPrice","setLatestPrice","latestPriceFontColor","setLatestPriceFontColor","stock","symbol","then","price","interval","setInterval","newPrice","clearInterval","color","quantity","pricePurchased","parseFloat","toFixed","StockList","StocksToTable","stockList","map","_id","stocks"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getStockLatestPrice } from \"../helpers\";\nimport { Stock } from \"../interfaces\";\n\ninterface stockProps {\n  stock: Stock\n  //deleteStock: any\n  key: number\n}\n\n\nfunction StockRow(props: stockProps) {\n  const[latestPrice, setLatestPrice] = useState(0);\n  const[latestPriceFontColor, setLatestPriceFontColor] = useState(\"black\")\n\n  //initial price, runs once\n  useLayoutEffect (() => {\n    getStockLatestPrice(props.stock.symbol).then((price) => {\n      setLatestPrice(price)\n    });\n  }, []);\n\n  // sets latest price every 5 seconds\n  useEffect (() => {\n    const interval = setInterval(() => {\n      getStockLatestPrice(props.stock.symbol).then((newPrice) => {\n        if (newPrice > latestPrice) {\n          setLatestPriceFontColor(\"green\")\n        } else {\n          setLatestPriceFontColor(\"red\")\n        }\n        setLatestPrice(newPrice);\n        })\n    }, 99999999);\n    return () => clearInterval(interval);\n  }, []);\n\n  return(\n    <tr>\n      <td>{props.stock.symbol}</td>\n      <td style={{color: latestPriceFontColor}}>{latestPrice}</td>\n      <td>{props.stock.quantity}</td>\n      <td>{props.stock.pricePurchased}</td>\n      <td>{+(parseFloat(latestPrice)*props.stock.quantity).toFixed(2)}</td>\n      <td>{+(latestPrice*props.stock.quantity-props.stock.pricePurchased*props.stock.quantity).toFixed(2)}</td>\n      {/* <td>\n        <Link className=\"btn btn-link\" to={`/edit/${props.stock._id}`}>Edit</Link> |\n        <button className=\"btn btn-link\"\n          onClick={() => {\n            props.deleteStock(props.stock._id);\n          }}\n        >\n          Delete\n        </button>\n      </td> */}\n    </tr>\n  )\n}\n \n\ninterface stockListProps {\n  stocks: Stock[]\n}\nexport default function StockList(props: stockListProps) {\n \n // This method will delete a record\n//  async function deleteStock(id: any) {\n//    await fetch(`http://localhost:5000/${id}`, {\n//      method: \"DELETE\"\n//    });\n \n//    const newStocks = stocks.filter((el) => el._id !== id);\n//    setStocks(newStocks);\n//  }\n \n // This method will map out the records on the table\n const StocksToTable = (stockList: Stock[]) => {\n  return (\n    stockList.map((stock =>\n      <StockRow\n           stock={stock}\n           //deleteStock={() => deleteStock(stock._id)}\n           key={stock._id}\n         />\n    )))\n }\n \n // This following section will display the table with the records of individuals.\n return (\n   <div>\n     <h3>Stock List</h3>\n     <table>\n       <thead>\n         <tr>\n           <th>Symbol</th>\n           <th>Latest Price</th>\n           <th>Quantity</th>\n           <th>Price Purchased</th>\n           <th>Value</th>\n           <th>Net Value</th>\n         </tr>\n       </thead>\n       <tbody>{StocksToTable(props.stocks)}</tbody>\n     </table>\n   </div>\n );\n}"]},"metadata":{},"sourceType":"module"}