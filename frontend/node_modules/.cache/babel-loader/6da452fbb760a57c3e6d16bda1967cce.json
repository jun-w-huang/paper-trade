{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useEffect } from \"react\";\nexport async function getStockJSON(ticker) {\n  // console.log(`fetching ${ticker} JSON `);\n  // const string = '{\"avgTotalVolume\":102907144,\"calculationPrice\":\"close\",\"change\":2.89,\"changePercent\":0.01678,\"close\":175.08,\"closeSource\":\"official\",\"closeTime\":1641934800998,\"companyName\":\"Apple Inc\",\"currency\":\"USD\",\"delayedPrice\":175.12,\"delayedPriceTime\":1641934794061,\"extendedChange\":0.16,\"extendedChangePercent\":0.00091,\"extendedPrice\":175.24,\"extendedPriceTime\":1641949197193,\"high\":175.18,\"highSource\":\"15 minute delayed price\",\"highTime\":1641934813503,\"iexAskPrice\":0,\"iexAskSize\":0,\"iexBidPrice\":0,\"iexBidSize\":0,\"iexClose\":174.93,\"iexCloseTime\":1641934798642,\"iexLastUpdated\":1641934798642,\"iexMarketPercent\":0.012563814998690337,\"iexOpen\":172.38,\"iexOpenTime\":1641911400308,\"iexRealtimePrice\":174.93,\"iexRealtimeSize\":100,\"iexVolume\":956582,\"lastTradeTime\":1641934799659,\"latestPrice\":175.08,\"latestSource\":\"Close\",\"latestTime\":\"January 11, 2022\",\"latestUpdate\":1641934800998,\"latestVolume\":76137861,\"low\":170.82,\"lowSource\":\"15 minute delayed price\",\"lowTime\":1641912928335,\"marketCap\":2859821674680,\"oddLotDelayedPrice\":175.01,\"oddLotDelayedPriceTime\":1641934795584,\"open\":172.19,\"openTime\":1641911402394,\"openSource\":\"official\",\"peRatio\":15.59,\"previousClose\":172.19,\"previousVolume\":106765552,\"primaryExchange\":\"NASDAQ\",\"symbol\":\"AAPL\",\"volume\":76137861,\"week52High\":182.94,\"week52Low\":115.67,\"ytdChange\":-0.01351791068311083,\"isUSMarketOpen\":false}'\n  // const stockJSON = JSON.parse(string)\n  // return stockJSON\n  try {\n    const response = await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`);\n    const stockJSON = await response.json();\n    return stockJSON;\n  } catch {\n    return `Tried to fetch ${ticker}, but the stock wasn't found ):`;\n  }\n}\nexport async function getStockLatestPrice(symbol) {\n  return getStockJSON(symbol).then(stockJSON => {\n    if (typeof stockJSON === 'string') {\n      return 0;\n    } else {\n      return stockJSON.latestPrice;\n    }\n  });\n}\nexport async function getAllUserJSON() {\n  const response = await fetch(`http://localhost:5000/users/`);\n\n  if (!response.ok) {\n    const message = `An error occured: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  const users = await response.json();\n  return users;\n}\n;\nexport async function getThisUserJSON(id) {\n  // const users = await getAllUserJSON()\n  const response = await fetch(`http://localhost:5000/users/${id}`);\n\n  if (response) {\n    return response.json();\n  }\n}\n;\nexport async function getThisUserStocks(id) {\n  const response = await fetch(`http://localhost:5000/users/${id}`);\n\n  if (response) {\n    const user = await response.json();\n    return user.stocks;\n  }\n} // returns a valid index if the stock exists in the portfolio, otherwise returns -1\n\nexport function getStockIndex(userJSON, stock) {\n  const searchValue = stock.symbol;\n\n  const isStockSymbol = stock => {\n    return stock.symbol === searchValue;\n  };\n\n  const index = userJSON.stocks.findIndex(isStockSymbol);\n  return index;\n} // https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n// dan abramov set interval typescript version\n\nexport function useInterval(callback, delay) {\n  _s();\n\n  const savedCallback = useRef(null); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current !== null) {\n        savedCallback.current();\n      }\n    }\n\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");","map":{"version":3,"sources":["/Users/JunWeiHuang/Google Drive/PersonalProjects/Javascript/paperTrade-mongo/frontend/src/helpers.tsx"],"names":["useRef","useEffect","getStockJSON","ticker","response","fetch","stockJSON","json","getStockLatestPrice","symbol","then","latestPrice","getAllUserJSON","ok","message","statusText","window","alert","users","getThisUserJSON","id","getThisUserStocks","user","stocks","getStockIndex","userJSON","stock","searchValue","isStockSymbol","index","findIndex","useInterval","callback","delay","savedCallback","current","tick","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { IRootObject, Portfolio, Stock, userJSON } from \"./interfaces\";\n\nexport async function getStockJSON(ticker: string): Promise<IRootObject | string> {\n    // console.log(`fetching ${ticker} JSON `);\n    // const string = '{\"avgTotalVolume\":102907144,\"calculationPrice\":\"close\",\"change\":2.89,\"changePercent\":0.01678,\"close\":175.08,\"closeSource\":\"official\",\"closeTime\":1641934800998,\"companyName\":\"Apple Inc\",\"currency\":\"USD\",\"delayedPrice\":175.12,\"delayedPriceTime\":1641934794061,\"extendedChange\":0.16,\"extendedChangePercent\":0.00091,\"extendedPrice\":175.24,\"extendedPriceTime\":1641949197193,\"high\":175.18,\"highSource\":\"15 minute delayed price\",\"highTime\":1641934813503,\"iexAskPrice\":0,\"iexAskSize\":0,\"iexBidPrice\":0,\"iexBidSize\":0,\"iexClose\":174.93,\"iexCloseTime\":1641934798642,\"iexLastUpdated\":1641934798642,\"iexMarketPercent\":0.012563814998690337,\"iexOpen\":172.38,\"iexOpenTime\":1641911400308,\"iexRealtimePrice\":174.93,\"iexRealtimeSize\":100,\"iexVolume\":956582,\"lastTradeTime\":1641934799659,\"latestPrice\":175.08,\"latestSource\":\"Close\",\"latestTime\":\"January 11, 2022\",\"latestUpdate\":1641934800998,\"latestVolume\":76137861,\"low\":170.82,\"lowSource\":\"15 minute delayed price\",\"lowTime\":1641912928335,\"marketCap\":2859821674680,\"oddLotDelayedPrice\":175.01,\"oddLotDelayedPriceTime\":1641934795584,\"open\":172.19,\"openTime\":1641911402394,\"openSource\":\"official\",\"peRatio\":15.59,\"previousClose\":172.19,\"previousVolume\":106765552,\"primaryExchange\":\"NASDAQ\",\"symbol\":\"AAPL\",\"volume\":76137861,\"week52High\":182.94,\"week52Low\":115.67,\"ytdChange\":-0.01351791068311083,\"isUSMarketOpen\":false}'\n    // const stockJSON = JSON.parse(string)\n    // return stockJSON\n    try {\n        const response = await fetch(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote/\n                                        ?token=Tpk_e2b21cc8584845038c4338a07fc520ef`)\n        const stockJSON = await response.json();\n        return stockJSON\n    } catch {\n        return `Tried to fetch ${ticker}, but the stock wasn't found ):`;\n    }\n}\n\nexport async function getStockLatestPrice(symbol: string): Promise<number> {\n    return getStockJSON(symbol).then((stockJSON => {\n        if (typeof stockJSON === 'string') {\n            return 0;\n        } else {\n            return stockJSON.latestPrice;\n        }\n    }));\n}\n\nexport async function getAllUserJSON(): Promise<userJSON[] | void> { \n    const response = await fetch(`http://localhost:5000/users/`);\n    if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n    }\n\n    const users = await response.json();\n    return users\n};\n\nexport async function getThisUserJSON(id: string) { \n    // const users = await getAllUserJSON()\n    const response = await fetch(`http://localhost:5000/users/${id}`);\n    if (response) {\n        return response.json()\n    }\n};\n\nexport async function getThisUserStocks(id: string) {\n    const response = await fetch(`http://localhost:5000/users/${id}`);\n    if (response) {\n        const user = await response.json()\n        return user.stocks;\n    }\n}\n\n// returns a valid index if the stock exists in the portfolio, otherwise returns -1\nexport function getStockIndex(userJSON: userJSON, stock: Stock | IRootObject ): any {\n    const searchValue = stock.symbol\n    const isStockSymbol = (stock: Stock) => {\n        return stock.symbol === searchValue\n    }\n    const index = userJSON.stocks.findIndex(isStockSymbol)\n    return index\n}\n\n// https://gist.github.com/babakness/faca3b633bc23d9a0924efb069c9f1f5\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n// dan abramov set interval typescript version\nexport type IntervalFunction = () => ( unknown | void )\n\nexport function useInterval( callback: IntervalFunction, delay: number ) {\n\n    const savedCallback = useRef<IntervalFunction| null>( null )\n\n    // Remember the latest callback.\n    useEffect( () => {\n        savedCallback.current = callback\n    } )\n\n    // Set up the interval.\n    useEffect( () => {\n        function tick() {\n        if ( savedCallback.current !== null ) {\n            savedCallback.current()\n        }\n        }\n        const id = setInterval( tick, delay )\n        return () => clearInterval( id )\n\n    }, [ delay ] )\n}"]},"metadata":{},"sourceType":"module"}